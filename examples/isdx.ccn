changequote(`[[[', `]]]')

divert([[[-1]]])
define([[[forloop]]], [[[pushdef([[[$1]]], [[[$2]]])_forloop($@)popdef([[[$1]]])]]])
define([[[_forloop]]],
       [[[$4[[[]]]ifelse($1, [[[$3]]], [[[]]], [[[define([[[$1]]], incr($1))$0($@)]]])]]])
divert[[[]]]dnl

define([[[MAXAS]]], 1000)
define([[[MASKBITS]]], 48)

typedef uint<32> IP4

typedef struct {
    [bool; MASKBITS] dstAddr,
    uint<48> srcAddr
} eth_t 

typedef struct {
    uint<8> protocol,
    IP4 src,
    IP4 dst
} ip4_t

typedef struct {
    bool valid,
    uint<16> vid
} vlan_t

typedef struct {
    eth_t    eth,
    ip4_t    ip4,
    vlan_t   vlan
} Packet

typedef uint<10> ASId
typedef struct {
    uint<32> addr,
    uint<8>  mask
} IP4Prefix

typedef uint<16> ASPort
typedef struct {
    ASId as,
    ASPort port
} ASPortDescr
typedef uint<16> SDXPort

(* 
BGP route database encoding
*)

function nAS(): ASId = 10'd[[[]]]MAXAS

(* Number of ASs connected to exchange *)
function iAS(ASId as): bool = as < nAS() 

(* Number of SDX-facing ports for each AS *)
function asNPorts(ASId as): ASPort

function iASPort(ASId as, ASPort port): bool = iAS(as) and port < asNPorts(as)

(* Database of routes advertised via BGP *)
function prefixMatch(ASId as, IP4 addr): bool

function forwardable(IP4 ip): bool = 
    false[[[]]]forloop([[[i]]], [[[0]]], decr(MAXAS), [[[ or prefixMatch(10'd[[[]]]i, ip)]]])

role ASRouterIn[ASId as] | iAS(as) = 
    havoc pkt.eth;
    if (forwardable(pkt.ip4.dst)) then
        ?send ASSDXIn[prefixMatch(.as, pkt.ip4.dst)]

role ASSDXIn[ASId as, ASPort port] | iASPort(as, port) = filter false

refine ASRouterIn {
    (*
    User-defined policy functions 
    *)
    function outboundPolicies(ASId as, uint<10> i): ASId
    function outboundPolicy(ASId from, ASId to, ip4_t p): bool
    assume (ASId as, uint<10> i) (as >= 10'd[[[]]]MASKBITS) => not iAS(outboundPolicies(as, i))

    function applyOutboundPolicy(ASId as, ip4_t addr): ASId = 
        case {
forloop([[[i]]], [[[0]]], decr(MASKBITS), [[[            outboundPolicy(as, outboundPolicies(as, 10'd[[[]]]i), addr): 10'd[[[]]]i;
]]])dnl
            default: 10'd[[[]]]MASKBITS;
        }

    function inboundPolicy(ASId as, ip4_t p): ASPort
    (* inbound policy must route packets to valid port numbers *)
    assume (ASId as, ip4_t p, ASPort port) iAS(as) and (inboundPolicy(as, p) == port) => (port < asNPorts(as))

    function nextHop(ASId as, IP4 addr): ASId

    (* nextHop is defined for all forwardable addresses *)
    assume (ASId as, IP4 ip) 
        forwardable(ip) => iAS(nextHop(as, ip))

    (* nextHop must be consistent with BGP database *)
    assume (ASId as, ASId dst, IP4 ip) 
        (iAS(dst) and (nextHop(as, ip) == dst)) => prefixMatch(dst, ip)

    role ASRouterIn[ASId as] | iAS(as) = 
        let ASId defdst = nextHop(as, pkt.ip4.dst);
        let uint<10> policy = applyOutboundPolicy(as, pkt.ip4);
        let ASId dst = outboundPolicies(as, policy);
        havoc pkt.eth;
        if iAS(dst) and prefixMatch(dst, pkt.ip4.dst) then {
            send ASSDXIn[dst, inboundPolicy(dst, pkt.ip4)]
        } else if iAS(defdst) then {
            send ASSDXIn[defdst, inboundPolicy(defdst, pkt.ip4)]
        }
}

refine ASRouterIn {

    function nSDXPort(): SDXPort
    function iSDXPort(SDXPort port): bool = port < nSDXPort()

    function asSDXLink(ASId as, ASPort asport): SDXPort
    assume (ASId ac, ASPort asport) iASPort(as, asport) => iSDXPort(asSDXLink(as, asport))

    function sdxASLink(SDXPort port): ASPortDescr
    (*assume iSDXPort(sdxport) => iASPort(sdxASLink(sdxport)) *)
    assume (ASId as, ASPort asport) iASPort(as, asport) => (ASPortDescr{as, asport} == sdxASLink(asSDXLink(as, asport)))

    function encode(ASId as, IP4 addr): [bool; MASKBITS] = 
        array!(prefixMatch(outboundPolicies(as, 10'd0), addr)[[[]]]forloop([[[i]]], [[[0]]], MASKBITS, [[[, prefixMatch(outboundPolicies(as, i), addr)]]]))
    
    (*function decode(, uint<38>): List<ASId>
    assume(ASId as, List<ASId> rset) iAS(as) => decode(as, encode(as, rset)) == rset*)

    role ASRouterIn[ASId as] | iAS(as) = 
         pkt.eth.dstAddr := encode(as, pkt.ip4.dst)(* ++ next_hop(as, pkt.ip4.dst)*);
         send ASSDXOut[as, 16'd0]

    role ASSDXOut[ASId as, ASPort port] | iASPort(as, port) = 
        send SDXIn[asSDXLink(as, port)]

    role SDXIn[SDXPort port] | iSDXPort(port) = 
        let ASId srcas = sdxASLink(port).as;
        let uint<10> policy = applyOutboundPolicy(srcas, pkt.ip4);
        let ASId dst = outboundPolicies(srcas, policy);
        if iAS(dst) and select!(pkt.eth.dstAddr, policy) then {
            send SDXOut[asSDXLink(inboundPolicy(dst, pkt.ip4))]
        } else {
            let ASId defdst = nextHop(srcas, pkt.ip4.dst);
            if iAS(defdst) then {
                send SDXOut[asSDXLink(inboundPolicy(defdst, pkt.ip4))]
            }
        }

    role SDXOut[SDXPort port] | iSDXPort(port) = 
        let ASPortDescr asport = sdxASLink(port);
        send ASSDXIn[asport.as, asport.port]
}


refine {

    function asNPorts(ASId as): ASPort = 16'd1
}
