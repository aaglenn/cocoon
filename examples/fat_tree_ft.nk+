typedef struct {
    uint<8> ip3,
    uint<8> ip2,
    uint<8> ip1,
    uint<8> ip0
} IP4

typedef struct {
    uint<8> dstip3,
    uint<8> dstip2,
    uint<8> dstip1,
    uint<8> dstip0
} Packet

function linkUp(Location): bool
function netmask(): uint<8>
function k(): uint<8>



role NodeIn(IP4 addr, uint<8> port)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() and port = 8'd0] = (filter false)
role NodeOut(IP4 addr, uint<8> port)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() and port = 8'd0] = 
    send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0}, 8'd0]

refine NodeOut {

    role Fabric() =
        send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0}, 8'd0]
        
    role NodeOut(IP4 addr, uint<8> port)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip3 < k() and port = 8'd0] = 
        send Fabric[]
}

refine Fabric, NodeOut {
    role Core() = 
        send Pod[pkt.dstip2]

    role Pod(uint<8> subnet)[subnet < k() + k()] = 
        if not (pkt.dstip2 = subnet) then send Core[]
        else send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0}, 8'd0]

    role NodeOut(IP4 addr, uint<8> port)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() and port = 8'd0] = 
        send Pod[pkt.dstip2]
}

refine Core, Pod, NodeOut {
    role Core() = 
        send PodUpper[pkt.dstip2]

    role PodUpper(uint<8> subnet) [subnet < k() + k()] = 
        if pkt.dstip2 = subnet then send PodLower[subnet,pkt.dstip1]
        else send Core[]

    role PodLower(uint<8> subnet, uint<8> subsubnet) [subnet < k() + k() and subsubnet < k()] = 
        if pkt.dstip2 = subnet and pkt.dstip1 = subsubnet then send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0}, 8'd0]
        else send PodUpper[subnet]

    role NodeOut(IP4 addr, uint<8> port)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() and port = 8'd0] = 
        send PodLower[pkt.dstip2, pkt.dstip1]
}

refine Core, PodUpper, PodLower {
    role Core(uint<8> hash)[hash < k()] = 
        send PodUpper[pkt.dstip2, *]

    role PodUpper(uint<8> subnet, uint<8> hash) [subnet < k() + k() and hash < k()] = 
        if pkt.dstip2 = subnet then send PodLower[subnet,pkt.dstip1]
        else send Core[hash]

    role PodLower(uint<8> subnet, uint<8> subsubnet) [subnet < k() + k() and subsubnet < k()] = 
        if pkt.dstip2 = subnet and pkt.dstip1 = subsubnet then send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0}, 8'd0]
        else send PodUpper[subnet,(*(subnet+pkt.dstip0)%k()*) *]
}

refine Core, PodUpper {
    role Core(uint<8> hash, uint<8> hash2)[hash < k() and hash2 < k()] = 
        send PodUpper[pkt.dstip2, *]

    role PodUpper(uint<8> subnet, uint<8> hash) [subnet < k() + k() and hash < k()] = 
        if pkt.dstip2 = subnet then send PodLower[subnet,pkt.dstip1]
        else send Core[hash, (*(hash + pkt.dstip0)%k()*) *]
}

refine PodUpper, Core, PodLower {
    (* Link between core and pod *)
    typedef struct {
        uint<8> hash,
        uint<8> hash2, 
        uint<8> subnet
    } CorePortID

    function broken_core_port(): CorePortID

    assert linkUp(CoreOut[hash, hash2, port])       = not (broken_core_port = CorePortID{hash, hash2, port})
    assert linkUp(PodUpperUOut[subnet, hash, port]) = not (broken_core_port = CorePortID{hash, port, subnet})
    
    role PodUpperUIn(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
          (* If we receive a packet for the wrong subnet from the core, then the core is asking
             the pod to use a different core switch.  In this case, we bounce the packet back to the core
             via a different port. *)
          if subnet == pkt.dstip2 
              then send PodUpperLOut[subnet, hash, pkt.dstip1]
              else send PodUpperUOut[subnet, hash, (port + 1) % k()]

    role PodUpperUOut(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
        if linkUp(PodUpperUOut[subnet, hash, port])
            send Core[hash, port]

    role PodUpperLIn(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
        if pkt.dstip2 = subnet then send PodUpperLOut[subnet, hash, pkt.dstip1]
        else {
            if linkUp(PodUpperUOut[subnet, hash, (*(hash + pkt.dstip0)%k()*) pkt.dstip0])
                then send PodUpperUOut[subnet, hash, (*(hash + pkt.dstip0)%k()*) pkt.dstip0]
                else send PodUpperUOut[subnet, hash, (pkt.dstip0 + 1) % k()]
        }

    role PodUpperLOut(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
        if linkUp(PodUpperLOut[subnet, hash, port])
            send PodLower[subnet, port]

    role Core(uint<8> hash, uint<8> hash2)[hash < k() and hash2 < k()] = 
        if linkUp(PodUpperUIn[pkt.dstip2, hash, hash2])
            then send PodUpperUIn[pkt.dstip2, hash, hash2]
            else send PodUpperUIn[(pkt.dstip2 + 1) % (k() + k()), hash, hash2]

    role PodLower(uint<8> subnet, uint<8> subsubnet) [subnet < k() + k() and subsubnet < k()] = 
        if pkt.dstip2 = subnet and pkt.dstip1 = subsubnet then send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0},8'd0]
        else send PodUpperLIn[subnet,(*(subnet+pkt.dstip0)%k()*)pkt.dstip0,subsubnet]
}

refine Core, PodUpperUOut {
    role CoreIn(uint<8> hash, uint<8> hash2, uint<8> port)[hash < k() and hash2 < k() and port < k() + k()] = 
        if linkUp(CoreOut[hash, hash2, pkt.dstip2])
            then send CoreOut[hash, hash2, pkt.dstip2]
            else send CoreOut[hash, hash2, (pkt.dstip2 + 1) % (k() + k())]

    role CoreOut(uint<8> hash, uint<8> hash2, uint<8> port)[hash < k() and hash2 < k() and port < k() + k()] = 
        if linkUp(CoreOut[hash, hash2, port]) 
            send PodUpperUIn[port, hash, hash2]

    role PodUpperUOut(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
        if linkUp(PodUpperUOut[subnet, hash, port]) 
            send CoreIn[hash, port, subnet]
}

refine PodLower, PodUpperLOut, PodUpperUIn, PodUpperLIn, NodeOut {
    (* Intra-pod link *)
    typedef struct {
        uint<8> subnet,
        uint<8> hash, 
        uint<8> subsubnet
    } ULLinkID

    function broken_pod_link(): ULLinkID

    assert linkUp(PodUpperLOut[subnet, hash, port])      = not (broken_pod_link() = ULLinkID{subnet, hash, port})
    assert linkUp(PodLowerUOut[subnet, subsubnet, port]) = not (broken_pod_link() = ULLinkID{subnet, port, subsubnet}) 

    role PodUpperUIn(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
          if subnet == pkt.dstip2 
              then {
                  if linkUp(PodUpperLOut[subnet, hash, pkt.dstip1])
                      then send PodUpperLOut[subnet, hash, pkt.dstip1]
                      else send PodUpperLOut[subnet, hash, (pkt.dstip1 + 1) % k()]
              } 
              else send PodUpperUOut[subnet, hash, (port + 1) % k()]

    role PodUpperLIn(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
        if pkt.dstip2 = subnet 
            then {
                if linkUp(PodUpperLOut[subnet, hash, pkt.dstip1])
                    then send PodUpperLOut[subnet, hash, pkt.dstip1]
                    else send PodUpperLOut[subnet, hash, (pkt.dstip1 + 1) % k()]
                }
            else {
                if linkUp(PodUpperUOut[subnet, hash, pkt.dstip0])
                    then send PodUpperUOut[subnet, hash, (*(hash + pkt.dstip0)%k()*) pkt.dstip0]
                    else send PodUpperUOut[subnet, hash, (pkt.dstip0 + 1) % k()]
                }

    role PodLowerUIn(uint<8> subnet, uint<8> subsubnet, uint<8> port) [subnet < k() + k() and subsubnet < k() and port < k()] = 
        if pkt.dstip1 = subsubnet
            then send PodLowerLOut[subnet, subsubnet, pkt.dstip0]
            else send PodLowerUOut[subnet, subsubnet, (port + 1) % k()]

    role PodLowerUOut(uint<8> subnet, uint<8> subsubnet, uint<8> port) [subnet < k() + k() and subsubnet < k() and port < k()] = 
        if linkUp(PodLowerUOut[subnet, subsubnet, port])
            send PodUpperLIn[subnet, port, subsubnet]

    role PodLowerLIn(uint<8> subnet, uint<8> subsubnet, uint<8> port) [subnet < k() + k() and subsubnet < k() and port < k()] = 
        if pkt.dstip2 = subnet and pkt.dstip1 = subsubnet then send PodLowerLOut[subnet, subsubnet, pkt.dstip0]
        else {
            if linkUp(PodLowerUOut[subnet,subsubnet,(*(subnet+pkt.dstip0)%k()*)pkt.dstip0])
                then send PodLowerUOut[subnet,subsubnet,(*(subnet+pkt.dstip0)%k()*)pkt.dstip0]
                else send PodLowerUOut[subnet,subsubnet,(*(subnet+pkt.dstip0)%k()*)(pkt.dstip0 + 1) % k()]
        }

    role PodLowerLOut(uint<8> subnet, uint<8> subsubnet, uint<8> port) [subnet < k() + k() and subsubnet < k() and port < k()] = 
        if linkUp(PodLowerLOut[subnet, subsubnet, port])
            send NodeIn[IP4{netmask(),subnet, subsubnet, port}, 8'd0]

    role PodUpperLOut(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
        if linkUp(PodUpperLOut[subnet, hash, port])
            send PodLowerUIn[subnet, port, hash]

    role NodeOut(IP4 addr, uint<8> port)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() and port = 8'd0] = 
        send PodLowerLIn[addr.ip2, addr.ip1, addr.ip0]
}

refine {

    role CoreSwitch(uint<8> hash, uint<8> hash2)[hash < k() and hash2 < k()] = (filter false)
    switch CoreSwitch( (CoreIn, CoreOut) )

    role PodUpperSwitch(uint<8> subnet, uint<8> hash)[subnet < k() + k() and hash < k()] = (filter false)
    switch PodUpperSwitch( (PodUpperUIn, PodUpperUOut), (PodUpperLIn, PodUpperLOut))

    role PodLowerSwitch(uint<8> subnet, uint<8> subsubnet) [subnet < k() + k() and subsubnet < k()] = (filter false)
    switch PodLowerSwitch( (PodLowerUIn, PodLowerUOut), (PodLowerLIn, PodLowerLOut))

    role NodeHost(IP4 addr) [addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k()] = (filter false)
    host NodeHost((NodeIn, NodeOut))
}
