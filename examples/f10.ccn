(* Liu et al. F10: A Fault-Tolerant Engineered Network *)

typedef struct {
    uint<8> ip3,
    uint<8> ip2,
    uint<8> ip1,
    uint<8> ip0
} IP4

typedef struct {
    uint<48> dstAddr,
    uint<48> srcAddr
} HEth

typedef struct {
    HEth     eth
} Packet

function p(): uint<8>
assume () p() < 8'd128 and p() > 8'd2

function k(): uint<8> = p() + p()

function incmodp(uint<8> v): uint<8>
 = 
    case {
        (v + 8'd1) < p(): (v + 8'd1);
        default:          (v + 8'd1) - p();
    }
(*assume (uint<8> v) (not (incmodp(v) == v)) and (incmodp(v) < p()) *)

function tree(uint<48> addr): bool    = addr[0:0] == 1'd1
function i1(uint<48> addr): uint<8>   = addr[15:8]
function i0(uint<48> addr): uint<8>   = addr[23:16]
function port(uint<48> addr): uint<8> = addr[31:24]

function iL0Port(uint<8> i1, uint<8> i0, uint<8> port): bool = 
    i1 < p() and i0 < p() and port < p()

function goodPacket(Packet p): bool = 
    iL0Port(i1(p.eth.dstAddr), i0(p.eth.dstAddr), port(p.eth.dstAddr))

role L0In[bool tree, uint<8> i1, uint<8> i0, uint<8> port] | iL0Port(i1,i0,port) = 
    if goodPacket(pkt) then
        send L0Out[tree(pkt.eth.dstAddr), i1(pkt.eth.dstAddr), i0(pkt.eth.dstAddr), port(pkt.eth.dstAddr)]

role L0Out[bool tree, uint<8> i1, uint<8> i0, uint<8> port] | iL0Port(i1,i0,port) = 
     send HostIn[tree, i1, i0, port, 8'd0]

function iHost(bool tree, uint<8> i1, uint<8> i0, uint<8> h): bool = i1 < p() and i0 < p() and h < p()

role HostIn[bool tree, uint<8> i1, uint<8> i0, uint<8> h, uint<8> port] | iHost(tree, i1, i0, h) and port == 8'd0 = (filter false)
role HostOut[bool tree, uint<8> i1, uint<8> i0, uint<8> h, uint<8> port] | iHost(tree, i1, i0, h) and port == 8'd0 =
    send L0In[tree, i1, i0, h]


refine L0In {

    function hash(HEth eth): uint<8>
    assume (HEth e) hash(e) < p()

    function l1SwitchUp(bool tree, uint<8> i1, uint<8> r): bool
    assume (bool tree, uint<8> i1, uint<8> r1, uint<8> r2) 
        ((not (r1 == r2)) and (not l1SwitchUp(tree, i1, r1))) => l1SwitchUp(tree, i1, r2)

    function l1Avoid(bool tree, uint<8> i1, uint<8> r): bool
    assume (bool tree, uint<8> i1, uint<8> r)
        l1Avoid(tree, i1, r) => (not l1SwitchUp(tree, i1, r))

    assume (bool tree, uint<8> i1_1, uint<8> i1_2, uint<8> r) 
        (not (i1_1 == i1_2) and (not l1SwitchUp(tree, i1_1, r))) => l1SwitchUp(tree, i1_2, r)

    function pickdef01port(bool tree, Packet p): uint<8> =
        case {
            tree(p.eth.dstAddr) == tree and l1Avoid(tree, i1(p.eth.dstAddr), hash(p.eth)): incmodp(hash(p.eth));
            default: hash(p.eth);
        }

    function pick01port(bool tree, uint<8> i1, uint<8> defport): uint<8> =
        case {
            l1SwitchUp(tree, i1, defport): defport;
            default: incmodp(defport);
        }

    role L0In[bool tree, uint<8> i1, uint<8> i0, uint<8> port] | iL0Port(i1,i0,port) = 
        (* Validate packets at the edge *)
        if goodPacket(pkt) then {
            if tree(pkt.eth.dstAddr) == tree and i1(pkt.eth.dstAddr) == i1 and i0(pkt.eth.dstAddr) == i0 then {
                send L0Out[tree, i1, i0, port(pkt.eth.dstAddr)]
            } else {
                send L01Out[tree, i1, i0, pick01port(tree, i1, pickdef01port(tree, pkt))]
            }
        }
        
    role L01Out[bool tree, uint<8> i1, uint<8> i0, uint<8> port] | iL0Port(i1,i0,port) / goodPacket(pkt) = 
        if l1SwitchUp(tree, i1, port) then
            send L10In[tree, i1, port, i0]

    role L01In[bool tree, uint<8> i1, uint<8> i0, uint<8> port] | iL0Port(i1,i0,port) / goodPacket(pkt) = 
        send L0Out[tree, i1, i0, port(pkt.eth.dstAddr)]

    function iL1Port(uint<8> i1, uint<8> r, uint<8> port): bool = 
        i1 < p() and r < p() and port < p()

    role L10In[bool tree, uint<8> i1, uint<8> r, uint<8> port] | iL1Port(i1,r,port) / goodPacket(pkt) = 
        ?send L10Out[.tree==tree(pkt.eth.dstAddr) and .i1 == i1(pkt.eth.dstAddr) and .r < p() and .port == i0(pkt.eth.dstAddr)]

    role L10Out[bool tree, uint<8> i1, uint<8> r, uint<8> port] | iL1Port(i1,r,port) / goodPacket(pkt) = 
        send L01In[tree, i1, port, r]
}

refine L10In {

    function l2SwitchUp(uint<8> x, uint<8> y): bool
    assume (uint<8> x1, uint<8> y1, uint<8> x2, uint<8> y2) 
        ((not l2SwitchUp(x1, y1)) and (not (x1 == x2 and y1 == y2))) => l2SwitchUp(x2, y2)

    function pickdef12port(bool tree, Packet p): uint<8> =
        case {
            tree(p.eth.dstAddr) != tree and l1Avoid(tree(p.eth.dstAddr), i1(p.eth.dstAddr), hash(p.eth)): incmodp(hash(p.eth));
            default: hash(p.eth);
        }

    function pick12port(bool tree, uint<8> i1, uint<8> r, uint<8> defport): uint<8> =
        case {
            tree == false: 
                case {
                    l2SwitchUp(r, defport): defport;
                    default: incmodp(defport);};
            default: 
                case {
                    l2SwitchUp(defport, r): defport;
                    default: incmodp(defport);};
        }

    role L10In[bool tree, uint<8> i1, uint<8> r, uint<8> port] | iL1Port(i1,r,port) / goodPacket(pkt) = 
        if tree(pkt.eth.dstAddr) == tree and i1(pkt.eth.dstAddr) == i1 then {
            if i0(pkt.eth.dstAddr) < p() then {
                send L10Out[tree, i1, r, i0(pkt.eth.dstAddr)]
            }
        } else {
            send L12Out[tree, i1, r, pick12port(tree, i1, r, pickdef12port(tree, pkt))]
        }
  
    role L12Out[bool tree, uint<8> i1, uint<8> r, uint<8> port] | iL1Port(i1,r,port) / goodPacket(pkt) = 
        if tree == false then {
             if l2SwitchUp(r, port) then
                send L2In[r, port, i1]           
        } else {
            if l2SwitchUp(port, r) then
                send L2In[port, r, p() + i1]
        }

    function iL2Port(uint<8> x, uint<8> y, uint<8> port): bool = 
        x < p() and y < p() and port < k()

    role L2In[uint<8> x, uint<8> y, uint<8> port] | iL2Port(x,y,port) / goodPacket(pkt) = 
        if tree(pkt.eth.dstAddr) == false then {
             if l1SwitchUp(false, i1(pkt.eth.dstAddr), x) then {
                send L2Out[x, y, i1(pkt.eth.dstAddr)]
             } else if l1SwitchUp(true, hash(pkt.eth), y) then {
                send L2Out[x, y, p() + hash(pkt.eth)]
             } else {
                send L2Out[x, y, p() + incmodp(hash(pkt.eth))]
             }
        } else {
             if l1SwitchUp(true, i1(pkt.eth.dstAddr), y) then {
                send L2Out[x, y, p() + i1(pkt.eth.dstAddr)]
             } else if l1SwitchUp(false, hash(pkt.eth), x) then {
                send L2Out[x, y, hash(pkt.eth)]
             } else {
                send L2Out[x, y, incmodp(hash(pkt.eth))]
             }
        }

    role L2Out[uint<8> x, uint<8> y, uint<8> port] | iL2Port(x,y,port) / goodPacket(pkt) = 
        if (port < p()) then {
             if l1SwitchUp(false, port, x) then
                send L12In[false, port, x, y]
        } else {
             if l1SwitchUp(true, port - p(), y) then
                send L12In[true, port - p(), y, x]
        }

    role L12In[bool tree, uint<8> i1, uint<8> r, uint<8> port] | iL1Port(i1,r,port) / goodPacket(pkt) = 
        if (tree == tree(pkt.eth.dstAddr) and i1 == i1(pkt.eth.dstAddr)) then {
            send L10Out[tree, i1, r, i0(pkt.eth.dstAddr)]
        } else {
            send L12Out[tree, i1, r, pick12port(tree, i1, r, incmodp(port))]
        }
}

refine {
    role L2Switch[uint<8> x, uint<8> y] | x < p() and y < p() = filter false
    switch L2Switch( (L2In, L2Out) )

    role L1Switch[bool tree, uint<8> i1, uint<8> r] | i1 < p() and r < p() = filter false
    switch L1Switch( (L10In, L10Out), (L12In, L12Out) )

    role L0Switch[bool tree, uint<8> i1, uint<8> i0] | i1 < p() and i0 < p() = filter false
    switch L0Switch( (L0In, L0Out), (L01In, L01Out) )


    role Host[bool tree, uint<8> i1, uint<8> i0, uint<8> h] | iHost(tree, i1, i0, h) = (filter false)
    host Host((HostIn, HostOut))
}

refine {
    function p(): uint<8> = 8'd3
}
