define(`VIRT_STYLE', `VXLAN')

include(`virtualization.m4.ccn')

(* VxLAN-based virtualization on top of L3 physical networks *)

refine {

    function iHost(HostId hst): bool
    function hostIP(HostId hst): IP4
    function ip2Host(IP4 addr): HostId
    assume (HostId hst) iHost(hst) => (hst == ip2Host(hostIP(hst)))

    function iVHostPPort(VHPortId port): bool
    assume (VHPortId port) iVHostPPort(port) => iVHost(port.vhost)

    function v2pPort(VHPortId port): HostId
    function p2vPort(HostId addr): VHPortId
    assume (VHPortId port, HostId hst) (iVHostPPort(port) and (hst == v2pPort(port))) => iHost(hst) 
    assume (VHPortId port, HostId hst) (iVHostPPort(port) and (hst == v2pPort(port))) => (p2vPort(hst) == port)

    role VHostPIn[VHostId vhost, uint<8> port] | iVHostPPort(VHPortId{vhost, port}) = filter false
    role VHostPOut[VHostId vhost, uint<8> port] | iVHostPPort(VHPortId{vhost, port}) = 
        if pkt.vxlan == novxlan() then {
            send VSwitchPlainOut[v2pPort(VHPortId{vhost, port})]
        }

    role VSwitchPlainOut[HostId hst] | iHost(hst) / not pkt.vxlan.valid = 
        let HostId dhst = ip2Host(pkt.ip4.dst);
        if (pkt.ip4.valid and iHost(dhst)) then
            send VSwitchPlainIn[dhst]

    role VSwitchPlainIn[HostId hst] | iHost(hst) / pkt.vxlan == novxlan() = 
        let VHPortId vport = p2vPort(hst);
        if iVHostPPort(vport) then {
            send VHostPIn[vport.vhost, vport.vport]
        }
}

refine VHostVOut {
    function nextHop(eth_t p, VHPortId port): VHPortId = mac2VHPort(vHPortVNet(port), p.dstAddr)
    function iNFVHost(VHostId hst): bool = false
    
    (* Physical topology *)
    function vHostLocation(VHostId vhost): HostId
    assume (VHostId vhost) iVHost(vhost) => iHost(vHostLocation(vhost))
    
    function iVSwitchPort(HostId hst, uint<16> swport): bool
    assume (HostId hst, uint<16> swport) iVSwitchPort(hst, swport) => iHost(hst)

    function hHostsVNet(HostId hst, VNetId vnet): bool
    assume (VHPortId vhport, VNetId vnet, HostId hst) 
           (vHPortVNet(vhport) == vnet and vHostLocation(vhport.vhost) == hst) => hHostsVNet(hst, vnet) 


    function vH2SwLink(VHPortId hport): uint<16>
    function vSw2HLink(HostId hst, uint<16> swport): VHPortId

    function vSwPortVNet(HostId hst, uint<16> swport): VNetId =
        vHPortVNet(vSw2HLink(hst, swport))

    function downTunVnet(): VNetId
    function upTunVnet(): VNetId
    assume (VNetId vnet) iVNet(vnet) => (downTunVnet() != vnet)
    assume (VNetId vnet) iVNet(vnet) => (upTunVnet() != vnet)
    assume () upTunVnet() != downTunVnet()

    (* link symmetry: break it into 5 assertions to help z3 handle quantifiers *)
    (*assume (VHPortId hport, IP4 ip, uint<16> swport) 
           (iVHostPort(hport) and vHostLocation(hport.vhost) == ip and vH2SwLink(hport) == swport) == ((iVSwitchPort(ip, swport)) and (vSw2HLink(ip, swport) == hport)) *)
    
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVHostPort(hport) and vHostLocation(hport.vhost) == hst and vH2SwLink(hport) == swport) => (iVSwitchPort(hst, swport))
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVHostPort(hport) and vHostLocation(hport.vhost) == hst and vH2SwLink(hport) == swport) => (vSw2HLink(hst, swport) == hport)
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVSwitchPort(hst, swport) and vSw2HLink(hst, swport) == hport) => iVHostPort(hport)
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVSwitchPort(hst, swport) and vSw2HLink(hst, swport) == hport) => (vHostLocation(hport.vhost) == hst)
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVSwitchPort(hst, swport) and vSw2HLink(hst, swport) == hport) => (vH2SwLink(hport) == swport)

    function vxlanEncapsulate(Packet p, VNetId vnet, IP4 src, IP4 dst): Packet =
        Packet{ eth_t{48'd0, 48'd0}
              , vlan_t{3'd0, 12'd0}
              , noarp()
              , ip4_t{true, 8'd17(*UDP*), src, dst}
              , vxlan_t{true, vnet, p.eth, p.vlan, p.arp, p.ip4}}

    function vxlanDecapsulate(Packet p): Packet =
        Packet{ p.vxlan.eth
              , p.vxlan.vlan
              , p.vxlan.arp
              , p.vxlan.ip4
              , novxlan()}
 
    role VHostVOut[VHostId vhost, uint<8> port] | iVHostPort(VHPortId{vhost, port}) =
        send VSwitchIn[vHostLocation(vhost), vH2SwLink(VHPortId{vhost, port})]
   
    role VSwitchIn[HostId hst, uint<16> vport] | iVSwitchPort(hst, vport) = 
        let VHPortId from_vhport = vSw2HLink(hst, vport);
        if pkt.eth.srcAddr == vHPort2Mac(from_vhport) then {
            (* Destination exists? *)
            let VNetId vnet = vSwPortVNet(hst, vport);
            if bCastMAC() == pkt.eth.dstAddr then {
                if iL2VNet(vnet) then {
                    fork(HostId dhst | iHost(dhst) and hHostsVNet(dhst, vnet)) {
                        if dhst == hst then {
                            fork(VHPortId vhport | iVHostPort(vhport) and 
                                                   vHPortVNet(vhport) == vnet and 
                                                   vHostLocation(vhport.vhost) == hst and 
                                                   vH2SwLink(vhport) != vport and
                                                   connection(from_vhport, vhport)) {
                                pkt.vxlan := novxlan();
                                send VSwitchOut[hst, vH2SwLink(vhport)]
                            }
                        } else {
                            pkt := vxlanEncapsulate( pkt
                                                   , vnet
                                                   , hostIP(hst)
                                                   , hostIP(dhst));
                            send VSwitchVXLANOut[hst]
                        }
                    }
                } else if iL3VNet(vnet) and pkt.arp.valid and (pkt.arp.oper == 16'd1 (*ARP Request*)) then {
                    pkt := arpResponse(pkt);
                    send VSwitchOut[hst, vport]
                }
            } else {
                let VHPortId to_vhport = mac2VHPort(vnet, pkt.eth.dstAddr);
                if iVHostPort(to_vhport) and connection(from_vhport, to_vhport) then {
                    if (vHostLocation(to_vhport.vhost) == hst) then { 
                        (* Local destination -- deliver *)
                        pkt.vxlan := novxlan();
                        send VSwitchOut[hst, vH2SwLink(to_vhport)]
                    } else {
                        (* Remote destination -- encapsulate *)
                        pkt := vxlanEncapsulate( pkt
                                               , vnet
                                               , hostIP(hst)
                                               , hostIP(vHostLocation(to_vhport.vhost)));
                        send VSwitchVXLANOut[hst]

                    }
                }
            }
        }
        
    role VSwitchOut[HostId hst, uint<16> vport] | iVSwitchPort(hst, vport) = 
        let VHPortId vhport = vSw2HLink(hst, vport);
        send VHostVIn[vhport.vhost, vhport.vport]

    role VSwitchVXLANOut[HostId hst] | iHost(hst) / pkt.vxlan.valid and pkt.vxlan.vni != upTunVnet() and pkt.vxlan.vni != downTunVnet() = 
        let HostId dhst = ip2Host(pkt.ip4.dst);
        if (pkt.ip4.valid and iHost(dhst)) then
            send VSwitchVXLANIn[dhst]

    role VSwitchVXLANIn[HostId hst] | iHost(hst) = 
        if pkt.vxlan.valid then {
            (* Decapsulate *)
            let vxlan_t vxlan = pkt.vxlan;
            pkt := vxlanDecapsulate(pkt);
            if pkt.eth.dstAddr == bCastMAC() then {
                fork(VHPortId vhport | iVHostPort(vhport) and 
                                       vHPortVNet(vhport) == vxlan.vni and 
                                       vHostLocation(vhport.vhost) == hst and 
                                       connection(mac2VHPort(vxlan.vni, pkt.eth.srcAddr), vhport)) {
                    send VSwitchOut[hst, vH2SwLink(vhport)]
                }
            } else {
                send VSwitchOut[hst, vH2SwLink(mac2VHPort(vxlan.vni, vxlan.eth.dstAddr))]
            }
        }
}

refine VHostPOut, VSwitchPlainIn {

    function iVSwitchPPort(HostId hst, uint<16> swport): bool
    assume (HostId hst, uint<16> swport) iVSwitchPPort(hst, swport) => iHost(hst)

    function vH2SwPLink(VHPortId hport): uint<16>
    function vSw2HPLink(HostId hst, uint<16> swport): VHPortId

    (* link symmetry: break it into 5 assertions *)
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVHostPPort(hport) and vHostLocation(hport.vhost) == hst and vH2SwPLink(hport) == swport) => (iVSwitchPPort(hst, swport))
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVHostPPort(hport) and vHostLocation(hport.vhost) == hst and vH2SwPLink(hport) == swport) => (vSw2HPLink(hst, swport) == hport)
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVSwitchPPort(hst, swport) and vSw2HPLink(hst, swport) == hport) => iVHostPPort(hport)
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVSwitchPPort(hst, swport) and vSw2HPLink(hst, swport) == hport) => (vHostLocation(hport.vhost) == hst)
    assume (VHPortId hport, HostId hst, uint<16> swport) 
           (iVSwitchPPort(hst, swport) and vSw2HPLink(hst, swport) == hport) => (vH2SwPLink(hport) == swport)

    role VHostPOut[VHostId vhost, uint<8> port] | iVHostPPort(VHPortId{vhost, port}) = 
        send VSwitchPIn[vHostLocation(vhost), vH2SwPLink(VHPortId{vhost, port})]

    role VSwitchPIn[HostId hst, uint<16> vport] | iVSwitchPPort(hst, vport) =
        let HostId dsthost = v2pPort(vSw2HPLink(hst, vport));
        if pkt.vxlan == novxlan() then {
            if (dsthost == hst)(* port on same host *) then {
                send VSwitchPlainOut[hst]
            } else {
                pkt := vxlanEncapsulate( pkt
                                       , downTunVnet()
                                       , hostIP(hst)
                                       , hostIP(dsthost));
                send VSwitchTunOut[hst]
            }
        }

    role VSwitchPOut[HostId hst, uint<16> vport] | iVSwitchPPort(hst, vport) =
        let VHPortId vhport = vSw2HPLink(hst, vport);
        send VHostPIn[vhport.vhost, vhport.vport]

    role VSwitchTunOut[HostId hst] | iHost(hst) / pkt.vxlan.valid and (pkt.vxlan.vni == upTunVnet() or pkt.vxlan.vni == downTunVnet()) = 
        let HostId dhst = ip2Host(pkt.ip4.dst);
        if (pkt.ip4.valid and iHost(dhst)) then
            send VSwitchTunIn[dhst]

    role VSwitchTunIn[HostId hst] | iHost(hst) / pkt.vxlan.valid = 
        if pkt.vxlan.vni == downTunVnet() then {
            pkt := vxlanDecapsulate(pkt);
            send VSwitchPlainOut[hst]
        } else {
            let VHPortId vport = p2vPort(ip2Host(pkt.ip4.src));
            if iVHostPPort(vport) then {
                pkt := vxlanDecapsulate(pkt);
                send VSwitchPOut[hst, vH2SwPLink(vport)]           
            }
        }

    role VSwitchPlainIn[HostId hst] | iHost(hst) / pkt.vxlan == novxlan() = 
        let VHPortId vport = p2vPort(hst);
        if iVHostPPort(vport) then {
            let HostId dsthost = vHostLocation(vport.vhost);
            if dsthost == hst then {
                send VSwitchPOut[hst, vH2SwPLink(vport)]
            } else {
                pkt := vxlanEncapsulate( pkt
                                       , upTunVnet()
                                       , hostIP(hst)
                                       , hostIP(dsthost));
                send VSwitchTunOut[hst]
            }
        }
}

refine VSwitchTunOut, VSwitchVXLANOut, VSwitchPlainOut{

    role VSwitchTunOut[HostId hst] | iHost(hst) / pkt.vxlan.valid and (pkt.vxlan.vni == upTunVnet() or pkt.vxlan.vni == downTunVnet()) = 
        send HostOut[hst]

    role VSwitchVXLANOut[HostId hst] | iHost(hst) / pkt.vxlan.valid and pkt.vxlan.vni != upTunVnet() and pkt.vxlan.vni != downTunVnet() = 
        send HostOut[hst]

    role VSwitchPlainOut[HostId hst] | iHost(hst) / not pkt.vxlan.valid = 
        send HostOut[hst]

    role HostOut[HostId hst] | iHost(hst) = 
        let HostId dhst = ip2Host(pkt.ip4.dst);
        if (pkt.ip4.valid and iHost(dhst)) then
            send HostIn[dhst]

    role HostIn[HostId hst] | iHost(hst) = 
        if pkt.vxlan.valid then {
           if pkt.vxlan.vni == upTunVnet() or pkt.vxlan.vni == downTunVnet() then {
                send VSwitchTunIn[hst]
           } else {
                send VSwitchVXLANIn[hst]
           }
        } else {
           send VSwitchPlainIn[hst]
        }
}

refine {
    function iL2VNet(VNetId id): bool = id == 24'd0
    function iL3VNet(VNetId id): bool = id == 24'd1
    function iVHost(VHostId id): bool = 
        id == 32'd0 or id == 32'd1 or id == 32'd2 or id == 32'd3 or id == 32'd4 or id == 32'd5
    function iVHostPort(VHPortId port): bool = 
        iVHost(port.vhost) and port.vport == 8'd0
    function vHPortVNet(VHPortId port): VNetId = 
        case {
            port.vhost == 32'd0 or port.vhost == 32'd1 or port.vhost == 32'd2 : 24'd0;
            default: 24'd1;
        }
    function vHPort2Mac(VHPortId port): MAC = case {
            port.vhost == 32'd0 and port.vport == 8'd0: 48'h020000000001;
            port.vhost == 32'd1 and port.vport == 8'd0: 48'h020000000002;
            port.vhost == 32'd2 and port.vport == 8'd0: 48'h020000000003;
            port.vhost == 32'd3 and port.vport == 8'd0: 48'h020000000004;
            port.vhost == 32'd4 and port.vport == 8'd0: 48'h020000000005;
            port.vhost == 32'd5 and port.vport == 8'd0: 48'h020000000006;
            default: 48'h0;
        }
    function mac2VHPort(VNetId vnet, MAC mac): VHPortId = case {
            vnet == 24'd0 and mac == 48'h020000000001: VHPortId{32'd0, 8'd0};
            vnet == 24'd0 and mac == 48'h020000000002: VHPortId{32'd1, 8'd0};
            vnet == 24'd0 and mac == 48'h020000000003: VHPortId{32'd2, 8'd0};
            vnet == 24'd1 and mac == 48'h020000000004: VHPortId{32'd3, 8'd0};
            vnet == 24'd1 and mac == 48'h020000000005: VHPortId{32'd4, 8'd0};
            vnet == 24'd1 and mac == 48'h020000000006: VHPortId{32'd5, 8'd0};
            default: VHPortId{32'hffffffff, 8'hff};
        }

    function iHost(HostId hst): bool = 
        hst == 48'd0 or hst == 48'd1

    function hostIP(HostId hst): IP4 = 
        case {
            hst == 48'd0: 32'h10000001;
            hst == 48'd1: 32'h10000002;
            default: 32'h0;
        }

    function iVSwitchPort(HostId hst, uint<16> swport): bool = 
        (hst == 48'd0 and (swport == 16'd0 or swport == 16'd1 or swport == 16'd2)) or
        (hst == 48'd1 and (swport == 16'd0 or swport == 16'd1 or swport == 16'd2))

    function vHostLocation(VHostId vhost): HostId = 
        case {
            vhost == 32'd0 or vhost == 32'd2 or vhost == 32'd4: 48'd0;
            default: 48'd1;
        }
    function vH2SwLink(VHPortId hport): uint<16> = 
        case {
            hport == VHPortId{32'd0, 8'd0}: 16'd0;
            hport == VHPortId{32'd1, 8'd0}: 16'd0;
            hport == VHPortId{32'd2, 8'd0}: 16'd1;
            hport == VHPortId{32'd3, 8'd0}: 16'd1;
            hport == VHPortId{32'd4, 8'd0}: 16'd2;
            hport == VHPortId{32'd5, 8'd0}: 16'd2;
            default: 16'd0;
        }
    function vSw2HLink(HostId hst, uint<16> swport): VHPortId = 
        case {
            hst == 48'd0 and swport == 16'd0: VHPortId{32'd0, 8'd0};
            hst == 48'd0 and swport == 16'd1: VHPortId{32'd2, 8'd0};
            hst == 48'd0 and swport == 16'd2: VHPortId{32'd4, 8'd0};
            hst == 48'd1 and swport == 16'd0: VHPortId{32'd1, 8'd0};
            hst == 48'd1 and swport == 16'd1: VHPortId{32'd3, 8'd0};
            hst == 48'd1 and swport == 16'd2: VHPortId{32'd5, 8'd0};
            default: VHPortId{32'd0, 8'd0};
        }

    function iVHostPPort(VHPortId port): bool = false
    function iVSwitchPPort(HostId hst, uint<16> swport):bool = false 

(*
    role VHost[VHostId vhost] | iVHost(vhost) = filter false
    host VHost( (VHostVIn, VHostVOut) )

    role VSwitch[IP4 hst] | iHost(hst) = filter false
    switch VSwitch((VSwitchIn, VSwitchOut), (VSwitchVXLANIn, VSwitchVXLANOut)) *)
}
