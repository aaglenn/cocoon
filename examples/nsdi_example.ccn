typedef uint<32> IP4
typedef uint<12> vid_t
typedef struct {
  vid_t vid,
  IP4 srcIP,
  IP4 dstIP
} Packet

function cHost(IP4 addr): bool
function cSubnet(vid_t vid): bool
function acl(Packet p): bool
function ip2subnet(IP4 ip): vid_t
assume (IP4 addr) cHost(addr) => cSubnet(ip2subnet(addr))

role HostOut[IP4 addr, uint<16> port] | cHost(addr) and port == 16'd0 =
  let vid_t svid = ip2subnet(pkt.srcIP);
  let vid_t dvid = ip2subnet(pkt.dstIP);
  filter pkt.vid == 12'd0;
  filter addr == pkt.srcIP;
  filter svid == dvid or acl(pkt);
  filter cHost(pkt.dstIP);
  send HostIn[pkt.dstIP, 16'd0]

role HostIn[IP4 addr, uint<16> port] | cHost(addr) and port == 16'd0 = filter false


(* Introduce dedicated routers for subnets *)
refine HostOut {
  typedef uint<16> zid_t
  function cZone(zid_t zid): bool
  function zone(IP4 addr): zid_t
  assume (IP4 addr) cHost(addr) => cZone(zone(addr))

  function gwZone(vid_t vid): zid_t
  assume (vid_t vid) cSubnet(vid) => cZone(gwZone(vid))

  function aclSrc(Packet p): bool
  function aclDst(Packet p): bool
  assume (Packet p) acl(p) == (aclSrc(p) and aclDst(p)) 

  assume (vid_t vid) cSubnet(vid) => (vid != 12'd0)

  role RouterZoneIn[zid_t zid, uint<16> port] | cZone(zid) and port == 16'd0 = 
    let vid_t dvid = ip2subnet(pkt.dstIP);
    let vid_t svid = pkt.vid;
    filter cSubnet(dvid);
    if dvid != svid and gwZone(svid) == zid then {
      pkt.vid := 12'd0;
      filter aclSrc(pkt)
    };
    send RouterCoreOut[zid, 16'd0]
        
  role RouterZoneOut[zid_t zid, uint<16> port] | cZone(zid) and port ==16'd0 =
    filter cHost(pkt.dstIP) and zone(pkt.dstIP) == zid;
    pkt.vid := 12'd0;
    send HostIn[pkt.dstIP, 16'd0]

  role RouterCoreIn[zid_t zid, uint<16> port] | cZone(zid) and port == 16'd0 = 
    let vid_t dvid = ip2subnet(pkt.dstIP);
    if pkt.vid == 12'd0 then {
      filter aclDst(pkt);
      pkt.vid := dvid;
      if zone(pkt.dstIP) == zid then
        send RouterZoneOut[zid, 16'd0]
      else 
        send RouterCoreOut[zid, 16'd0]
    } else if pkt.vid == dvid then {
      send RouterZoneOut[zid, 16'd0]
    } else {
      let vid_t svid = pkt.vid;
      pkt.vid := 12'd0;
      filter aclSrc(pkt);
      send RouterCoreOut[zid, 16'd0]
    }
            
  role RouterCoreOut[zid_t zid, uint<16> port] | cZone(zid) and port == 16'd0 / cHost(pkt.srcIP) =
    if pkt.vid == 12'd0 then {
      filter cSubnet(ip2subnet(pkt.dstIP));
      send RouterCoreIn[gwZone(ip2subnet(pkt.dstIP)), 16'd0]
    } else if pkt.vid != ip2subnet(pkt.dstIP) then {
      send RouterCoreIn[gwZone(ip2subnet(pkt.srcIP)), 16'd0]
    } else {
      filter cZone(zone(pkt.dstIP));
      send RouterCoreIn[zone(pkt.dstIP), 16'd0]
    }

  role HostOut[IP4 addr, uint<16> port] | cHost(addr) and port == 16'd0 =
    let vid_t svid = ip2subnet(pkt.srcIP);
    let vid_t dvid = ip2subnet(pkt.dstIP);
    filter addr == pkt.srcIP;
    filter pkt.vid == 12'd0;
    if svid == dvid and zone(pkt.dstIP) == zone(addr) then {
      filter cHost(pkt.dstIP);
      send HostIn[pkt.dstIP, 16'd0]
    } else {
      pkt.vid := ip2subnet(addr);
      send RouterZoneIn[zone(addr), 16'd0]
    }
}

refine RouterCoreOut {
  role RouterCoreOut[zid_t zid, uint<16> port] |cZone(zid) and port == 16'd0 /cHost(pkt.srcIP)=
      send CoreSwitchIn[zid]

  role CoreSwitchIn[uint<16> port] | cZone(port) =
    if pkt.vid == 12'd0 then {
      filter cSubnet(ip2subnet(pkt.dstIP));
      send CoreSwitchOut[gwZone(ip2subnet(pkt.dstIP))]
    } else if pkt.vid != ip2subnet(pkt.dstIP) then {
      send CoreSwitchOut[gwZone(ip2subnet(pkt.srcIP))]
    } else {
      filter cZone(zone(pkt.dstIP));
      send CoreSwitchOut[zone(pkt.dstIP)]
    }

  role CoreSwitchOut[uint<16> port] | cZone(port) = 
    send RouterCoreIn[port, 16'd0]
}

refine HostOut, RouterZoneOut {
  function cSwport(zid_t zid, uint<16> port): bool
  assume (zid_t zid) cZone(zid) => cSwport(zid, 16'd0)
  assume (zid_t zid, uint<16> port) cSwport(zid, port) => cZone(zid)
  function host2swport(IP4 addr): uint<16>
  assume (IP4 addr) cHost(addr) => cSwport(zone(addr), host2swport(addr))
  assume (IP4 addr) cHost(addr) => host2swport(addr) != 16'd0
  function swport2host(zid_t zid, uint<16> port): IP4
  assume (IP4 addr) cHost(addr) => swport2host(zone(addr), host2swport(addr)) == addr
  
  role RouterZoneOut[zid_t zid, uint<16> port] | cZone(zid) and port == 16'd0 =
      send ZoneSwitchIn[zid, 16'd0]

  role HostOut[IP4 addr, uint<16> port] | cHost(addr) and port == 16'd0 =
      send ZoneSwitchIn[zone(addr), host2swport(addr)]

  role ZoneSwitchIn[zid_t zid, uint<16> port] | cSwport(zid, port) =
    if port == 16'd0 then {
        filter cHost(pkt.dstIP) and zone(pkt.dstIP) == zid;
        pkt.vid := 12'd0;
        send ZoneSwitchOut[zid, host2swport(pkt.dstIP)]
    } else {
        let vid_t svid = ip2subnet(pkt.srcIP);
        let vid_t dvid = ip2subnet(pkt.dstIP);
        filter swport2host(zid, port) == pkt.srcIP;
        filter pkt.vid == 12'd0;
        if svid == dvid and zone(pkt.dstIP) == zid then {
          filter cHost(pkt.dstIP);
          send ZoneSwitchOut[zid, host2swport(pkt.dstIP)]
        } else {
          pkt.vid := svid;
          send ZoneSwitchOut[zid, 16'd0]
        }
    }

  role ZoneSwitchOut[zid_t zid, uint<16> port] | cSwport(zid, port) = 
     if port == 16'd0 then {
        send RouterZoneIn[zid, 16'd0]
     } else {
        send HostIn[swport2host(zid, port), 16'd0]
     }
}



refine {

  role Host[IP4 addr] | cHost(addr) = filter false
  host Host((HostIn, HostOut))

  role ZoneSwitch[zid_t zid] | cZone(zid) = filter false
  switch ZoneSwitch((ZoneSwitchIn, ZoneSwitchOut))

  role ZoneRouter[zid_t zid] | cZone(zid) = filter false
  switch ZoneRouter((RouterZoneIn, RouterZoneOut), (RouterCoreIn, RouterCoreOut))

  role CoreSwitch[] = filter false
  switch CoreSwitch((CoreSwitchIn, CoreSwitchOut))
}

refine {
  function cHost(IP4 addr): bool = addr == 32'd1001 or addr == 32'd2001
  function cSubnet(vid_t vid): bool = vid == 12'd1 or vid == 12'd2
  function cZone(zid_t zid): bool = zid == 16'd0 or zid == 16'd1
  function acl(Packet p): bool = p.srcIP == 32'd1001 and p.dstIP == 32'd2001
  function ip2subnet(IP4 ip): vid_t = case { ip == 32'd1001: 12'd1;
                                             default: 12'd2; }
  function zone(IP4 addr): zid_t = case { addr == 32'd1001: 16'd0;
                                          default: 16'd1; }
  function gwZone(vid_t vid): zid_t = case { vid == 12'd1: 16'd0;
                                             default: 16'd1; }
  function aclSrc(Packet p): bool = acl(p)
  function aclDst(Packet p): bool = true

  function cSwport(zid_t zid, uint<16> port): bool = 
    zid == 16'd0 and port == 16'd0 or
    zid == 16'd1 and port == 16'd0 or
    zid == 16'd0 and port == 16'd1 or
    zid == 16'd1 and port == 16'd1

  function host2swport(IP4 addr): uint<16> = 16'd1
  function swport2host(zid_t zid, uint<16> port): IP4 = case { zid == 16'd0: 32'd1001;
                                                               default: 32'd2001; } 

}
