typedef struct {
    uint<8> ip3,
    uint<8> ip2,
    uint<8> ip1,
    uint<8> ip0
} IP4

typedef struct {
    IP4 dstip
} Packet

function netmask(): uint<8> = 8'd10
function k(): uint<8> = 8'd2

function dst(Packet): IP4
function inode(IP4): bool
(* addr.ip3 == netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() *)

role NodeIn[IP4 addr, uint<8> port] | inode(IP4) = (filter false)
role NodeOut[IP4 addr, uint<8> port] | inode(IP4) = 
    if inode(dst(pkt)) then
        send NodeIn[dst(Packet)]

refine NodeOut {

    function icorePort(uint<8> hash, uint<8> hash2, uint<8> port): bool = 
        hash < k() and hash2 < k() and port < k() + k()

    function coreLinkUp(uint<8> hash, uint<8> hash2, uint<8> port): bool

    role CoreIn[uint<8> hash, uint<8> hash2, uint<8> port] | icorePort(hash, hash2, port) = 
        if coreLinkUp(hash, hash2, dst(pkt).ip2) then
            send CoreOut[hash, hash2, dst(pkt).ip2]
        else
            send CoreOut[hash, hash2, (dst(pkt).ip2 + 1) % k()]

    role CoreOut[uint<8> hash, uint<8> hash2, uint<8> port] | icorePort(hash, hash2, port) = 
        if coreLinkUp(hash, hash2, port) then
            send PodUpperIn[port, hash, hash2]

    role PodUpperOut[uint<8> subnet, uint<8> hash, uint<8> port] | icorePort(hash, port, subnet) = 
        if coreLinkUp(hash, port, subnet) then
            send CoreIn[hash, port, subnet]

    role PodUpperIn[uint<8> subnet, uint<8> hash, uint<8> port] | icorePort(hash, port, subnet) = 
        if (dst(pkt).ip2 == subnet) then
            send PodLowerOut[subnet, dst(pkt).ip1, dst(pkt).ip0]
        else
            send PodUpperOut[subnet, hash, (port+1) % k()]

    function ilowerPort(uint<8> subnet, uint<8> subsubnet, uint<8> port): bool = 
        subnet < k() + k() and subsubnet < k() and port < k()

    role PodLowerIn[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(subnet, subsubnet, port) = 
        if (dst(pkt).ip2 == subnet) then
            send PodLowerOut[subnet, dst(pkt).ip1, dst(pkt).ip0]
        else {
            send PodUpperOut[subnet, *, *]
        }

    role PodLowerOut[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(subnet, subsubnet, port) = 
        if inode(IP4{netmask(), subnet, subsubnet, port}) then
            send NodeIn[IP4{netmask(), subnet, subsubnet, port}, 0]

    role NodeOut[IP4 addr, uint<8> port] | inode(IP4) = 
        send PodLowerIn[addr.ip2, addr.ip1, addr.ip0]
}

refine PodLowerIn, PodUpperIn {

    function ipodPort(uint<8> subnet, uint<8> subsubnet, uint<8> port): bool = 
        subnet < k() + k() and subsubnet < k() and port < k()

    function podLinkUp(uint<8> subnet, uint<8> subsubnet, uint<8> port): bool

    role PodUpperLIn[uint<8> subnet, uint<8> hash, uint<8> port] | ipodPort(subnet, port, hash) = 
    role PodUpperLOut[uint<8> subnet, uint<8> hash, uint<8> port] | ipodPort(subnet, port, hash) = 
        if podLinkUp(subnet, port, hash) then
            send PodLowerUIn[subnet, port, hash]

    role PodLowerUIn[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ipodPort(subnet, subsubnet, port) = 
    role PodLowerUOut[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ipodPort(subnet, subsubnet, port) = 
        if podLinkUp(subnet, subsubnet, port) then
            send PodUpperLIn[subnet, port, subsubnet]

    role PodLowerIn[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(subnet, subsubnet, port) = 
    role PodUpperIn[uint<8> subnet, uint<8> hash, uint<8> port] | icorePort(hash, port, subnet) = 
}

refine Fabric, NodeOut {
    role Core[] = 
        send Pod[pkt.dstip2]

    role Pod[uint<8> subnet] | subnet < k() + k() = 
        if not (pkt.dstip2 == subnet) then send Core[]
        else send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0}, 8'd0]

    role NodeOut[IP4 addr, uint<8> port] | addr.ip3 == netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() and port == 8'd0 = 
        send Pod[pkt.dstip2]
}

refine Core, Pod, NodeOut {
    role Core[] = 
        send PodUpper[pkt.dstip2]

    role PodUpper[uint<8> subnet] = 
        if pkt.dstip2 == subnet then send PodLower[subnet,pkt.dstip1]
        else send Core[]

    role PodLower[uint<8> subnet, uint<8> subsubnet] | subnet < k() + k() and subsubnet < k() = 
        if pkt.dstip2 == subnet and pkt.dstip1 == subsubnet then send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0}, 8'd0]
        else send PodUpper[subnet]

    role NodeOut[IP4 addr, uint<8> port] | addr.ip3 == netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() and port == 8'd0 = 
        send PodLower[pkt.dstip2, pkt.dstip1]
}

refine Core, PodUpper, PodLower {
    role Core[uint<8> hash] | hash < k() = 
        send PodUpper[pkt.dstip2, hash]

    role PodUpper[uint<8> subnet, uint<8> hash] | subnet < k() + k() and hash < k() = 
        if pkt.dstip2 == subnet then send PodLower[subnet,pkt.dstip1]
        else send Core[hash]

    role PodLower[uint<8> subnet, uint<8> subsubnet] | subnet < k() + k() and subsubnet < k() = 
        if pkt.dstip2 == subnet and pkt.dstip1 == subsubnet then send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0}, 8'd0]
        else send PodUpper[subnet,(*(subnet+pkt.dstip0)%k()*)pkt.dstip0]
}

refine Core, PodUpper {
    role Core[uint<8> hash, uint<8> hash2] | hash < k() and hash2 < k() = 
        send PodUpper[pkt.dstip2, hash]

    role PodUpper[uint<8> subnet, uint<8> hash] | subnet < k() + k() and hash < k() = 
        if pkt.dstip2 == subnet then send PodLower[subnet,pkt.dstip1]
        else send Core[hash, (*(hash + pkt.dstip0)%k()*) pkt.dstip0]
}

refine PodUpper, Core, PodLower {
    role PodUpperUIn[uint<8> subnet, uint<8> hash, uint<8> port] | subnet < k() + k() and hash < k() and port < k() = 
          send PodUpperLOut[subnet, hash, pkt.dstip1]

    role PodUpperUOut[uint<8> subnet, uint<8> hash, uint<8> port] | subnet < k() + k() and hash < k() and port < k() = 
          send Core[hash, port]

    role PodUpperLIn[uint<8> subnet, uint<8> hash, uint<8> port] | subnet < k() + k() and hash < k() and port < k() = 
        if pkt.dstip2 == subnet then send PodUpperLOut[subnet, hash, pkt.dstip1]
        else send PodUpperUOut[subnet, hash, (*(hash + pkt.dstip0)%k()*) pkt.dstip0]

    role PodUpperLOut[uint<8> subnet, uint<8> hash, uint<8> port] | subnet < k() + k() and hash < k() and port < k() = 
        send PodLower[subnet, port]

    role Core[uint<8> hash, uint<8> hash2] | hash < k() and hash2 < k() = 
        send PodUpperUIn[pkt.dstip2, hash, hash2]

    role PodLower[uint<8> subnet, uint<8> subsubnet] | subnet < k() + k() and subsubnet < k() = 
        if pkt.dstip2 == subnet and pkt.dstip1 == subsubnet then send NodeIn[IP4{pkt.dstip3, pkt.dstip2, pkt.dstip1, pkt.dstip0},8'd0]
        else send PodUpperLIn[subnet,(*(subnet+pkt.dstip0)%k()*)pkt.dstip0,subsubnet]
}

refine Core, PodUpperUOut {
    role CoreIn[uint<8> hash, uint<8> hash2, uint<8> port] | hash < k() and hash2 < k() and port < k() + k() = 
        send CoreOut[hash, hash2, pkt.dstip2]

    role CoreOut[uint<8> hash, uint<8> hash2, uint<8> port] | hash < k() and hash2 < k() and port < k() + k() = 
        send PodUpperUIn[port, hash, hash2]

    role PodUpperUOut[uint<8> subnet, uint<8> hash, uint<8> port] | subnet < k() + k() and hash < k() and port < k() = 
        send CoreIn[hash, port, subnet]
}

refine PodLower, PodUpperLOut, NodeOut {
    role PodLowerUIn[uint<8> subnet, uint<8> subsubnet, uint<8> port] | subnet < k() + k() and subsubnet < k() and port < k() = 
        send PodLowerLOut[subnet, subsubnet, pkt.dstip0]

    role PodLowerUOut[uint<8> subnet, uint<8> subsubnet, uint<8> port] | subnet < k() + k() and subsubnet < k() and port < k() = 
        send PodUpperLIn[subnet, port, subsubnet]

    role PodLowerLIn[uint<8> subnet, uint<8> subsubnet, uint<8> port] | subnet < k() + k() and subsubnet < k() and port < k() = 
        if pkt.dstip2 == subnet and pkt.dstip1 == subsubnet then send PodLowerLOut[subnet, subsubnet, pkt.dstip0]
        else send PodLowerUOut[subnet,subsubnet,(*(subnet+pkt.dstip0)%k()*)pkt.dstip0]

    role PodLowerLOut[uint<8> subnet, uint<8> subsubnet, uint<8> port] | subnet < k() + k() and subsubnet < k() and port < k() = 
        send NodeIn[IP4{netmask(),subnet, subsubnet, port}, 8'd0]

    role PodUpperLOut[uint<8> subnet, uint<8> hash, uint<8> port] | subnet < k() + k() and hash < k() and port < k() = 
        send PodLowerUIn[subnet, port, hash]

    role NodeOut[IP4 addr, uint<8> port] | addr.ip3 == netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() and port == 8'd0 = 
        send PodLowerLIn[addr.ip2, addr.ip1, addr.ip0]
}

refine {

    role CoreSwitch[uint<8> hash, uint<8> hash2] | hash < k() and hash2 < k() = (filter false)
    switch CoreSwitch( (CoreIn, CoreOut) )

    role PodUpperSwitch[uint<8> subnet, uint<8> hash] | subnet < k() + k() and hash < k() = (filter false)
    switch PodUpperSwitch( (PodUpperUIn, PodUpperUOut), (PodUpperLIn, PodUpperLOut))

    role PodLowerSwitch[uint<8> subnet, uint<8> subsubnet] | subnet < k() + k() and subsubnet < k() = (filter false)
    switch PodLowerSwitch( (PodLowerUIn, PodLowerUOut), (PodLowerLIn, PodLowerLOut))

    role NodeHost[IP4 addr] | addr.ip3 == netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k() = (filter false)
    host NodeHost((NodeIn, NodeOut))
}
