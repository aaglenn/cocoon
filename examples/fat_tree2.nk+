typedef struct {
    uint<8> ip3,
    uint<8> ip2,
    uint<8> ip1,
    uint<8> ip0
} IP4

typedef struct {
    IP4 dstip
} Packet

function netmask(): uint<8>
function k(): uint<8>

function dst(Packet p): IP4

function inode(IP4): bool

role NodeIn[IP4 addr, uint<8> port] | inode(IP4) = (filter false)
role NodeOut[IP4 addr, uint<8> port] | inode(IP4) = 
    if inode(dst(pkt)) then
        send NodeIn[dst(Packet)]

refine NodeOut {

    function icorePort(uint<8> hash, uint<8> hash2, uint<8> port): bool = 
        hash < k() and hash2 < k() and port < k() + k()

    function coreLinkUp(uint<8> hash, uint<8> hash2, uint<8> port): bool

    role CoreIn[uint<8> hash, uint<8> hash2, uint<8> port] | icorePort(hash, hash2, port) = 
        if coreLinkUp(hash, hash2, dst(pkt).ip2) then
            send CoreOut[hash, hash2, dst(pkt).ip2]
        else
            send CoreOut[hash, hash2, (dst(pkt).ip2 + 1) % k()]

    role CoreOut[uint<8> hash, uint<8> hash2, uint<8> port] | icorePort(hash, hash2, port) = 
        if coreLinkUp(hash, hash2, port) then
            send PodUpperIn[port, hash, hash2]

    role PodUpperOut[uint<8> subnet, uint<8> hash, uint<8> port] | icorePort(hash, port, subnet) = 
        if coreLinkUp(hash, port, subnet) then
            send CoreIn[hash, port, subnet]

    role PodUpperIn[uint<8> subnet, uint<8> hash, uint<8> port] | icorePort(hash, port, subnet) = 
        if (dst(pkt).ip2 == subnet) then
            send PodLowerOut[subnet, dst(pkt).ip1, dst(pkt).ip0]
        else
            send PodUpperOut[subnet, hash, (port+1) % k()]

    function ilowerPort(uint<8> subnet, uint<8> subsubnet, uint<8> port): bool = 
        subnet < k() + k() and subsubnet < k() and port < k()

    role PodLowerIn[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(subnet, subsubnet, port) = 
        if (dst(pkt).ip2 == subnet) then
            send PodLowerOut[subnet, dst(pkt).ip1, dst(pkt).ip0]
        else {
            send PodUpperOut[subnet, *, *]
        }

    role PodLowerOut[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(subnet, subsubnet, port) = 
        if inode(IP4{netmask(), subnet, subsubnet, port}) then
            send NodeIn[IP4{netmask(), subnet, subsubnet, port}, 0]

    role NodeOut[IP4 addr, uint<8> port] | inode(IP4) = 
        send PodLowerIn[addr.ip2, addr.ip1, addr.ip0]
}

refine PodLowerIn, PodUpperIn {

    function ipodPort(uint<8> subnet, uint<8> subsubnet, uint<8> port): bool = 
        subnet < k() + k() and subsubnet < k() and port < k()

    function podLinkUp(uint<8> subnet, uint<8> subsubnet, uint<8> port): bool

    role PodUpperLIn[uint<8> subnet, uint<8> hash, uint<8> port] | ipodPort(subnet, port, hash) = 
        if dst(pkt).ip2 == subnet then {
            if podLinkUp(subnet, dst(pkt).ip1, hash) then
                send PodUpperLOut[subnet, hash, dst(pkt).ip1]
            else
                send PodUpperLOut[subnet, hash, (dst(pkt).ip1 + 1) % k()]
        } else {
            if coreLinkUp(hash, dst(pkt).ip0, subnet) then
                send PodUpperUOut[subnet, hash, dst(pkt).ip0]
            else
                send PodUpperUOut[subnet, hash, (dst(pkt).ip0+1) % k()]
        }

    role PodUpperLOut[uint<8> subnet, uint<8> hash, uint<8> port] | ipodPort(subnet, port, hash) = 
        if podLinkUp(subnet, port, hash) then
            send PodLowerUIn[subnet, port, hash]

    role PodLowerUIn[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ipodPort(subnet, subsubnet, port) = 
        if dst(pkt).ip1 == subsubnet then
            send PodLowerOut[subnet, subsubnet, dst(pkt).ip0]
        else 
            send PodLowerUOut[subnet, subsubnet, (port+1) % k()]

    role PodLowerUOut[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ipodPort(subnet, subsubnet, port) = 
        if podLinkUp(subnet, subsubnet, port) then
            send PodUpperLIn[subnet, port, subsubnet]

    role PodLowerIn[uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(subnet, subsubnet, port) = 
        if (dst(pkt).ip2 == subnet) && (dst(pkt).ip1 == subsubnet) then {
            if ilowerPort(subnet, subsubnet, dst(pkt).ip0)
                send PodLowerOut[subnet, subsubnet, dst(pkt).ip0]
        } else if podLinkUp(subnet, subsubnet, dst(pkt).ip0) then
            send PodUpperOut[subnet, subsubnet, dst(pkt).ip0]
        else 
            send PodUpperOut[subnet, subsubnet, (dst(pkt).ip0+1) % k()]

    role PodUpperIn[uint<8> subnet, uint<8> hash, uint<8> port] | icorePort(hash, port, subnet) = 
        if (dst(pkt).ip2 == subnet) then {
            if podLinkUp(subnet, dst(pkt).ip1, hash) then
                send PodUpperLOut[subnet, hash, dst(pkt).ip1]
            else
                send PodUpperLOut[subnet, hash, (dst(pkt).ip1+1) % k()]
        } else {
            send PodUpperOut[subnet, hash, (port+1) % k()]
        }
}

refine {
    role CoreSwitch[uint<8> hash, uint<8> hash2] | hash < k() and hash2 < k() = (filter false)
    switch CoreSwitch( (CoreIn, CoreOut) )

    role PodUpperSwitch[uint<8> subnet, uint<8> hash] | subnet < k() + k() and hash < k() = (filter false)
    switch PodUpperSwitch( (PodUpperIn, PodUpperOut), (PodUpperLIn, PodUpperLOut))

    role PodLowerSwitch[uint<8> subnet, uint<8> subsubnet] | subnet < k() + k() and subsubnet < k() = (filter false)
    switch PodLowerSwitch( (PodLowerUIn, PodLowerUOut), (PodLowerIn, PodLowerOut))

    role NodeHost[IP4 addr] | inode(addr) = (filter false)
    host NodeHost((NodeIn, NodeOut))
}

refine {
    function netmask(): uint<8> = 8'd10
    function k(): uint<8> = 8'd2

    function dst(Packet p): IP4 = p.dstip
    function inode(IP4): bool = addr.ip3 == netmask() and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k()

    function coreLinkUp(uint<8> hash, uint<8> hash2, uint<8> port): bool = true
    function podLinkUp(uint<8> subnet, uint<8> subsubnet, uint<8> port): bool = true
}
