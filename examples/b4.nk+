typedef struct {
    uint<8> ip3,
    uint<8> ip2,
    uint<8> ip1,
    uint<8> ip0
} IP4

typedef struct {
    uint<8> ip3,
    uint<8> ip2,
    uint<8> ip1,
    uint<8> ip0
} IP4

typedef struct {
    uint<16> tag
} VLANTag

typedef struct {
    HIP4     ip4,
    VLANTag  ?vlan
} Packet

(* true: host with the given IP exists *)
function ihost(IP4 addr): bool
function dst(Packet p): IP4

role HostOut[IP4 addr, uint<8> port] | ihost(addr) and port == 8'd0 = 
    if ihost(dst(pkt)) then
        send HostIn[dst(pkt), 8'd0]

role HostIn[IP4 addr, uint<8> port] | ihost(addr) and port == 8'd0 = 
    filter false

refine HostOut {
    function nports(): uint<8> = 8'd16
    typedef uint<8> SiteId
    typedef struct {
        SiteId site,
        uint<8> port
    } WANPort

    (* true iff site with given id exists *)
    function isite(SiteId site): bool

    (* WAN port is connected *)
    function wpConnected(SiteId site, uint<8> port): bool

    function iwanPort(SiteId site, uint<8> port): bool = isite(site) and port < nports()
 
    (* Port on the other end of WAN link *)
    function wanLink(SiteId site, uint<8> port): WANPort

    assume(SiteId site, uint<8> port) (not (iwanPort(site, port) and wpConnected(site,port))) or iwanPort(wanLink(site,port).site, wanLink(site,port).port)

    (* maps host to site it belongs to, e.g., based on subnet *)   
    function hostSite(IP4 addr): SiteId

    typedef uint<32> TunnelId

    function tunnel(SiteId src, SiteId dst, Packet p): TunnelId

    function nexthop(TunnelId tun, SiteId site): uint<8>
    assume(SiteId src, SiteId dst, Packet p, TunnelId tid, SiteId next)
           (not (tid == tunnel(src, dst, p) and next == wanLink(src, nexthop(tid, src)).site)) or 
           (wpConnected(src,nexthop(tid,src)) and (next == dst or wpConnected(next, nexthop(tid, next)) and wanLink(next, nexthop(tid, next)).site == dst))

    assume(uint<8> addr) (not ihost(addr)) or isite(hostSite(addr))

    role HostOut[IP4 addr, uint<8> port] | ihost(addr) and port == 8'd0 = 
        if hostSite(dst(pkt)) == hostSite(addr) then {
            if ihost(dst(pkt)) then
                send HostIn[dst(pkt), 8'd0]
        } else 
            send WANSwitchLIn[hostSite(addr), 8'd0]
    
    role WANSwitchLIn[SiteId site, uint<8> port] | isite(site) and port == 8'd0 = 
        add_header(pkt.vlan);
        pkt.vlan.tag := tunnel(site, hostSite(dst(pkt)), pkt);
        send WANSwitchGOut[site, nexthop(tunnel(site, hostSite(dst(pkt)), pkt), site)]

    role WANSwitchLOut[SiteId site, uint<8> port] | isite(site) and port == 8'd0 = 
        if ihost(dst(pkt)) and hostSite(dst(pkt)) == site then
            send HostIn[dst(pkt), 8'd0]

    role WANSwitchGOut[SiteId site, uint<8> port] | iwanPort(site, port) = 
        if (wpConnected(site,port)) then
            send WANSwitchGIn[wanLink(site,port).site, wanLink(site,port).port]

    role WANSwitchGIn[SiteId site, uint<8> port] | iwanPort(site, port) =
        if (hostSite(dst(pkt)) == site) then {
            if ihost(dst(pkt)) then
                send WANSwitchLOut[site,0]
        } else {
            send WANSwitchGOut[site, nexthop(pkt.vlan.tag,site)]
        }
}

refine HostOut, WANSwitchLOut {

    function wanSwAddr(SiteId site): IP4 = IP4{site, 8'd0, 8'd0, 8'd0}

    function hostSite(IP4 addr): SiteId = addr.ip3

    function ldst(SiteId site, Packet p): IP4 = 
        case {
            hostSite(dst(p)).ip3 == site: dst(p);
            default: wanSwAddr(site);
        }

    function ilowerPort(SideId site, uint<8> subnet, uint<8> subsubnet, uint<8> port): bool = 
        isite(site) and subnet < k() + k() and subsubnet < k() and port < k()

    role PodLowerIn[SiteId site, uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(site, subnet, subsubnet, port) = 
        send PodLowerOut[site, ldst(site, pkt).ip2, ldst(site, pkt).ip1, ldst(site, pkt).ip0]

    role PodLowerOut[SiteId site, uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(site, subnet, subsubnet, port) = 
        if IP4{site, subnet, subsubnet, port} == wanSwAddr(site) then {
            send WANSwitchLIn[site, 8'd0]
        } else if ihost(IP4{site, subnet, subsubnet, port}) then {
            send NodeIn[IP4{site, subnet, subsubnet, port}, 8'd0]
        }

    role HostOut[IP4 addr, uint<8> port] | ihost(addr) and port == 8'd0 = 
        send PodLowerIn[hostSite(addr), addr.ip2, addr.ip1, addr.ip0]
}

refine PodLowerIn {

    function icorePort(SiteId site, uint<8> hash, uint<8> hash2, uint<8> port): bool = 
        isite(site) and hash < k() and hash2 < k() and port < k() + k()

    function coreLinkUp(SiteId site, uint<8> hash, uint<8> hash2, uint<8> port): bool

    role CoreIn[SiteId site, uint<8> hash, uint<8> hash2, uint<8> port] | icorePort(site, hash, hash2, port) = 
        if coreLinkUp(site, hash, hash2, ldst(pkt).ip2) then
            send CoreOut[site, hash, hash2, ldst(pkt).ip2]
        else
            send CoreOut[site, hash, hash2, mod(ldst(pkt).ip2 + 8'd1, k())]

    role CoreOut[SiteId site, uint<8> hash, uint<8> hash2, uint<8> port] | icorePort(site, hash, hash2, port) = 
        if coreLinkUp(site, hash, hash2, port) then
            send PodUpperIn[site, port, hash, hash2]

    role PodUpperOut[SiteId site, uint<8> subnet, uint<8> hash, uint<8> port] | icorePort(site, hash, port, subnet) = 
        if coreLinkUp(site, hash, port, subnet) then
            send CoreIn[site, hash, port, subnet]

    role PodUpperIn[SiteId site, uint<8> subnet, uint<8> hash, uint<8> port] | icorePort(site, hash, port, subnet) = 
        if (ldst(pkt).ip2 == subnet) then
            send PodLowerOut[site, subnet, ldst(pkt).ip1, ldst(pkt).ip0]
        else
            send PodUpperOut[site, subnet, hash, mod(port+8'd1, k())]

    typedef struct {
        uint<8> hash,
        uint<8> hash2
    } CorePort

    function chooseCorePort(uint<8> subnet, Packet p): CorePort

    assume(uint<8> subnet, Packet p) 
          (not (subnet < k() + k())) or icorePort(chooseCorePort(subnet, p).hash, chooseCorePort(subnet, p).hash2, subnet)

    role PodLowerIn[SiteId site, uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(site, subnet, subsubnet, port) = 
        if (ldst(pkt).ip2 == subnet) then {
            send PodLowerOut[site, subnet, ldst(pkt).ip1, ldst(pkt).ip0]
        } else {
            send PodUpperOut[site, subnet, chooseCorePort(subnet, pkt).hash, chooseCorePort(subnet, pkt).hash2]
        }
}

refine PodLowerIn, PodUpperIn {

    function ipodPort(SiteId site, uint<8> subnet, uint<8> subsubnet, uint<8> port): bool = 
        isite(site) and subnet < k() + k() and subsubnet < k() and port < k()

    function podLinkUp(SiteId site, uint<8> subnet, uint<8> subsubnet, uint<8> port): bool

    role PodUpperLIn[SiteId site, uint<8> subnet, uint<8> hash, uint<8> port] | ipodPort(site, subnet, port, hash) = 
        if ldst(pkt).ip2 == subnet then {
            if podLinkUp(site, subnet, ldst(pkt).ip1, hash) then
                send PodUpperLOut[site, subnet, hash, ldst(pkt).ip1]
            else
                send PodUpperLOut[site, subnet, hash, mod(ldst(pkt).ip1 + 8'd1, k())]
        } else {
            if coreLinkUp(site, hash, ldst(pkt).ip0, subnet) then
                send PodUpperOut[site, subnet, hash, ldst(pkt).ip0]
            else
                send PodUpperOut[site, subnet, hash, mod(ldst(pkt).ip0+8'd1, k())]
        }

    role PodUpperLOut[SiteId site, uint<8> subnet, uint<8> hash, uint<8> port] | ipodPort(site, subnet, port, hash) = 
        if podLinkUp(site, subnet, port, hash) then
            send PodLowerUIn[site, subnet, port, hash]

    role PodLowerUIn[SiteId site, uint<8> subnet, uint<8> subsubnet, uint<8> port] | ipodPort(site, subnet, subsubnet, port) = 
        if ldst(pkt).ip1 == subsubnet then
            send PodLowerOut[site, subnet, subsubnet, ldst(pkt).ip0]
        else 
            send PodLowerUOut[site, subnet, subsubnet, mod(port+8'd1, k())]

    role PodLowerUOut[SiteId site, uint<8> subnet, uint<8> subsubnet, uint<8> port] | ipodPort(site, subnet, subsubnet, port) = 
        if podLinkUp(site, subnet, subsubnet, port) then
            send PodUpperLIn[site, subnet, port, subsubnet]

    role PodLowerIn[SiteId site, uint<8> subnet, uint<8> subsubnet, uint<8> port] | ilowerPort(site, subnet, subsubnet, port) = 
        if (ldst(pkt).ip2 == subnet) and (ldst(pkt).ip1 == subsubnet) then {
            if ilowerPort(site, subnet, subsubnet, ldst(pkt).ip0) then
                send PodLowerOut[site, subnet, subsubnet, ldst(pkt).ip0]
        } else if podLinkUp(site, subnet, subsubnet, ldst(pkt).ip0) then
            send PodLowerUOut[site, subnet, subsubnet, ldst(pkt).ip0]
        else 
            send PodLowerUOut[site, subnet, subsubnet, mod(ldst(pkt).ip0+8'd1, k())]

    role PodUpperIn[SiteId site, uint<8> subnet, uint<8> hash, uint<8> port] | icorePort(site, hash, port, subnet) = 
        if (ldst(pkt).ip2 == subnet) then {
            if podLinkUp(site, subnet, ldst(pkt).ip1, hash) then
                send PodUpperLOut[site, subnet, hash, ldst(pkt).ip1]
            else
                send PodUpperLOut[site, subnet, hash, mod(ldst(pkt).ip1+8'd1, k())]
        } else {
            send PodUpperOut[site, subnet, hash, mod(port+8'd1, k())]
        }
}

refine {
    role WANSwitch[SiteId site] | isite(site) = filter false
    switch WANSwitch( (WANSwitchLIn, WANSwitchLOut), (WANSwitchGIn, WANSwitchGOut) )

    role CoreSwitch[SiteId site, uint<8> hash, uint<8> hash2] | isite(site) and hash < k() and hash2 < k() = (filter false)
    switch CoreSwitch( (CoreIn, CoreOut) )

    role PodUpperSwitch[SiteId site, uint<8> subnet, uint<8> hash] | isite(site) and subnet < k() + k() and hash < k() = (filter false)
    switch PodUpperSwitch( (PodUpperIn, PodUpperOut), (PodUpperLIn, PodUpperLOut))

    role PodLowerSwitch[SiteId site, uint<8> subnet, uint<8> subsubnet] | isite(site) and subnet < k() + k() and subsubnet < k() = (filter false)
    switch PodLowerSwitch( (PodLowerUIn, PodLowerUOut), (PodLowerIn, PodLowerOut))

    role Host[IP4 addr] | ihost(addr) = (filter false)
    host Host((HostIn, HostOut))
}

refine {

    function isite(SiteId site): bool = site == 1 or site == 2 or site == 3

    function k(): uint<8> = 8'd2

    function dst(Packet p): IP4 = p.ip4.dst
    function ihost(IP4 addr): bool = isite(hostSite(addr)) and addr.ip2 < k()+k() and addr.ip1 < k() and addr.ip0 < k()
}
