typedef struct {
    uint<8> ip3,
    uint<8> ip2,
    uint<8> ip1,
    uint<8> ip0
} IPAddr

typedef struct {
    uint<48> dstAddr,
    uint<48> srcAddr
} eth_t

typedef struct {
   IPAddr src,
   IPAddr dst
} ip4_t

typedef struct {
    eth_t    eth,
    ip4_t    ip4
} Packet

function cHost(IPAddr addr): bool

role HostOut[IPAddr addr] | cHost(addr) = 
    if cHost(pkt.ip4.dst) then
        send HostIn[pkt.ip4.dst]

role HostIn[IPAddr addr] | cHost(addr) = filter false

refine HostOut {
    function p(): uint<8>
    assume (IPAddr addr) cHost(addr) => addr.ip3 == 8'd10 and addr.ip2 < p() and addr.ip1 < p() and addr.ip0 < p()

    function cToRPort(uint<8> pod, uint<8> rack, uint<8> port): bool = 
        pod < p() and rack < p() and port < p()

    role HostOut[IPAddr addr] | cHost(addr) = 
        send ToRIn[addr.ip2, addr.ip1, addr.ip0]

    role ToRIn[uint<8> pod, uint<8> rack, uint<8> port] | cToRPort(pod, rack, port) =
        let uint<8> dstpod  = pkt.ip4.dst.ip2;
        let uint<8> dstrack = pkt.ip4.dst.ip1;
        let uint<8> dstport = pkt.ip4.dst.ip0;
        if pkt.ip4.dst.ip3 == 8'd10 and cToRPort(dstpod, dstrack, dstport) then
            send ToROut[dstpod, dstrack, dstport]

    role ToROut[uint<8> pod, uint<8> rack, uint<8> port] | cToRPort(pod, rack, port) =
        let IPAddr addr = IPAddr{8'd10, pod, rack, port};
        if cHost(addr) then
            send HostIn[addr]
}

refine ToRIn {
    function cAggrPort(uint<8> pod, uint<8> sw, uint<8> port): bool = 
        pod < p() and sw < p() and port < p()

    role ToRIn[uint<8> pod, uint<8> rack, uint<8> port] | cToRPort(pod, rack, port) =
        if pkt.ip4.dst.ip3 == 8'd10 then
            send ToR2AggrOut[pod, rack, 8'd0]       

    role ToR2AggrOut[uint<8> pod, uint<8> rack, uint<8> port] | cToRPort(pod, rack, port) = 
        send AggrIn[pod, port, rack]

    role ToR2AggrIn[uint<8> pod, uint<8> rack, uint<8> port] | cToRPort(pod, rack, port) = 
        let uint<8> dstport = pkt.ip4.dst.ip0;
        if dstport < p() then
            send ToROut[pod, rack, dstport]

    role AggrIn[uint<8> pod, uint<8> sw, uint<8> port] | cAggrPort(pod, sw, port) = 
        let uint<8> dstpod  = pkt.ip4.dst.ip2;
        let uint<8> dstrack = pkt.ip4.dst.ip1;
        if dstpod < p() and dstrack < p() then
            ?send AggrOut[.pod == dstpod and .port == dstrack and .sw < p()]

    role AggrOut[uint<8> pod, uint<8> sw, uint<8> port] | cAggrPort(pod, sw, port) = 
        send ToR2AggrIn[pod, port, sw]
}

refine AggrIn {
    role AggrIn[uint<8> pod, uint<8> sw, uint<8> port] | cAggrPort(pod, sw, port) = 
        send Aggr2CoreOut[pod, sw, 8'd0]

    role Aggr2CoreOut[uint<8> pod, uint<8> sw, uint<8> port] | cAggrPort(pod, sw, port) = 
        send CoreIn[sw, port, pod]

    role Aggr2CoreIn[uint<8> pod, uint<8> sw, uint<8> port] | cAggrPort(pod, sw, port) = 
        if pkt.ip4.dst.ip1 < p() then
            send AggrOut[pod, sw, pkt.ip4.dst.ip1]

    function iCorePort(uint<8> i, uint<8> j, uint<8> port): bool = 
        port < p() and i < p() and j < p()

    role CoreIn[uint<8> i, uint<8> j, uint<8> port] | iCorePort(i,j,port) = 
        if pkt.ip4.dst.ip2 < p() then
            send CoreOut[i, j, pkt.ip4.dst.ip2]

    role CoreOut[uint<8> i, uint<8> j, uint<8> port] | iCorePort(i,j,port) = 
        send Aggr2CoreIn[port, i, j]
}

refine {
    function p(): uint<8> = 8'd4
    function cHost(IPAddr addr): bool = addr.ip3 == 8'd10 and addr.ip2 < p() and addr.ip1 < p() and addr.ip0 < p()
}
