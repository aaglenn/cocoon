(* TODO: external hosts, NAT *)

typedef uint<32> IP4
typedef uint<48> MAC

function bcastAddr(): MAC = 48'hffffffffffff

typedef struct {
    uint<16> etherType,
    MAC dstAddr,
    MAC srcAddr
} eth_t

function etherTypeIP4(): uint<16> = 16'h0800

typedef struct {
    uint<8> protocol,
    IP4 src,
    IP4 dst
} ip4_t

typedef uint<12> vid_t

typedef struct {
    vid_t vid
} vlan_t

typedef struct {
    eth_t    eth,
    vlan_t   vlan,
    ip4_t    ip
} Packet

typedef uint<64> hid_t

function cHost(hid_t hid): bool
function cVlan(vid_t vid): bool
function vidRouterMAC(vid_t vid): MAC
assume (vid_t vid) cVlan(vid) => (not cMAC(vidRouterMAC(vid)))
assume (vid_t vid) cVlan(vid) => (vid != 12'd0)

function ip2vid(IP4 ip): vid_t
function hid2ip(hid_t hid): IP4
function ip2hid(IP4 ip): hid_t
assume (hid_t hid) cHost(hid) => (ip2hid(hid2ip(hid)) == hid)
assume (IP4 ip) cHost(ip2hid(ip)) => (hid2ip(ip2hid(ip)) == ip)

function mac2hid(MAC mac): hid_t
function hid2mac(hid_t hid): MAC
assume (hid_t hid) cHost(hid) => (mac2hid(hid2mac(hid)) == hid)
assume (MAC mac) cHost(mac2hid(mac)) => (hid2mac(mac2hid(mac)) == mac)
assume (IP4 ip) ip2mac(ip) != bcastAddr()

function ip2mac(IP4 ip): MAC = hid2mac(ip2hid(ip))
function mac2ip(MAC mac): IP4 = hid2ip(mac2hid(mac))
function mac2vid(MAC mac): vid_t = ip2vid(mac2ip(mac))

function hid2vid(hid_t hid): vid_t = ip2vid(hid2ip(hid))
assume (hid_t hid) cHost(hid) => cVlan(hid2vid(hid))

function cIP(IP4 ip): bool = cHost(ip2hid(ip))
function cMAC(MAC mac): bool = cHost(mac2hid(mac))

function acl(vid_t srcvlan, vid_t dstvlan, ip4_t ip): bool

role HostOut[hid_t hid] | cHost(hid) =
    (*if pkt.eth.dstAddr == bcastAddr() then {
        fork(hid_t dsthid | hid2vid(dsthid) == hid2vid(hid)) {
            send HostIn[dsthid]
        } 
    } else *) if pkt.eth.dstAddr == vidRouterMAC(hid2vid(hid)) then {
        filter pkt.eth.etherType == etherTypeIP4();
        let hid_t dhid = ip2hid(pkt.ip.dst);
        let vid_t dvid = ip2vid(pkt.ip.dst);
        let vid_t vid = hid2vid(hid);
        filter ip2vid(pkt.ip.src) == vid and dvid != vid;
        filter acl(vid, dvid, pkt.ip);
        filter cHost(dhid);
        pkt.eth.dstAddr := ip2mac(pkt.ip.dst);
        pkt.vlan.vid := 12'd0;
        send HostIn[dhid]
    } else {
        pkt.vlan.vid := 12'd0;
        filter cMAC(pkt.eth.dstAddr) and mac2vid(pkt.eth.dstAddr) == hid2vid(hid);
        send HostIn[mac2hid(pkt.eth.dstAddr)]
    }

role HostIn[hid_t hid] | cHost(hid) = filter false

(* Introduce dedicated routers for subnets *)
refine HostOut {
    function aclSrc(vid_t srcvlan, vid_t dstvlan, ip4_t ip): bool
    function aclDst(vid_t srcvlan, vid_t dstvlan, ip4_t ip): bool
    assume (vid_t svid, vid_t dvid, ip4_t ip) (aclSrc(svid, dvid, ip) and aclDst(svid, dvid, ip)) == acl(svid, dvid, ip)

    role OutGateway[vid_t vid] | cVlan(vid) = 
        filter pkt.eth.etherType == etherTypeIP4();
        filter pkt.vlan.vid == vid;
        let vid_t svid = ip2vid(pkt.ip.src);
        let vid_t dvid = ip2vid(pkt.ip.dst);
        (* Sender is not lying about their subnet *)
        filter svid == vid;
        (* Destination vid exists and is different from source subnet *)
        filter cVlan(dvid) and dvid != vid;
        filter aclSrc(svid, dvid, pkt.ip);
        pkt.vlan.vid := 12'd0;
        havoc pkt.eth.dstAddr;
        send InGateway[dvid]

    role InGateway[vid_t vid] | cVlan(vid) = 
        filter pkt.eth.etherType == etherTypeIP4();
        filter pkt.vlan.vid == 12'd0;
        let vid_t svid = ip2vid(pkt.ip.src);
        let vid_t dvid = ip2vid(pkt.ip.dst);
        filter dvid == vid;
        filter aclDst(svid, dvid, pkt.ip);
        (*pkt.vlan.vid := dvid;*)
        pkt.eth.dstAddr := ip2mac(pkt.ip.dst);
        filter cIP(pkt.ip.dst);
        send HostIn[ip2hid(pkt.ip.dst)]

    role HostOut[hid_t hid] | cHost(hid) =
(*        if pkt.eth.dstAddr == bcastAddr() then {
            fork(hid_t dsthid | hid2vid(dsthid) == hid2vid(hid)) {
                send HostIn[dsthid]
            } 
        } else *)if pkt.eth.dstAddr == vidRouterMAC(hid2vid(hid)) then {
            let vid_t vid = hid2vid(hid);
            pkt.vlan.vid := vid;
            send OutGateway[vid]
        } else {
            pkt.vlan.vid := 12'd0;
            filter cMAC(pkt.eth.dstAddr) and mac2vid(pkt.eth.dstAddr) == hid2vid(hid);
            send HostIn[mac2hid(pkt.eth.dstAddr)]
        }
}

(* L3 routing *)
refine OutGateway {
    typedef struct {
        hid_t hid,
        uint<16> port
    } pid_t

    typedef struct {
        MAC addr,
        uint<16> port
    } nexthop_t

    (* Zones *)
    typedef uint<32> zid_t
    function cZone(zid_t zid): bool

    (* Routers have interfaces in zones; interfaces have MAC addresses *)
    function cRouter(hid_t rid): bool
    assume (hid_t rid) cRouter(rid) => not cHost(rid)

    function vidRouter(vid_t vid): hid_t
    assume (vid_t vid) cVlan(vid) => cRouter(vidRouter(vid))

    function portConnected(pid_t pid): bool
    function cRouterPort(pid_t pid): bool
    assume (pid_t pid) cRouterPort(pid) => cRouter(pid.hid)
    function cConnectedRouterPort(pid_t pid): bool = cRouterPort(pid) and portConnected(pid)

    function routerPortZone(pid_t pid): zid_t
    assume (pid_t pid) cConnectedRouterPort(pid) => cZone(routerPortZone(pid))

    function pid2mac(pid_t pid): MAC
    function mac2pid(MAC mac): pid_t
    assume (pid_t pid) cConnectedRouterPort(pid) => (mac2pid(pid2mac(pid)) == pid)
    assume (pid_t pid) pid2mac(pid) != bcastAddr()
    assume (MAC mac) cConnectedRouterPort(mac2pid(mac)) => (pid2mac(mac2pid(mac)) == mac)
    assume (vid_t vid) cVlan(vid) => cConnectedRouterPort(mac2pid(vidRouterMAC(vid)))

    (* L3 routing policy *)
    function l3NextHop(hid_t rid, vid_t vid): nexthop_t
    assume (hid_t rid, vid_t vid) (cRouter(rid) and cVlan(vid) and vidRouter(vid) != rid) => cConnectedRouterPort(pid_t{rid, l3NextHop(rid, vid).port})
    assume (hid_t rid, vid_t vid) (cRouter(rid) and cVlan(vid) and vidRouter(vid) != rid) => cConnectedRouterPort(mac2pid(l3NextHop(rid, vid).addr))
    assume (hid_t rid, vid_t vid) (cRouter(rid) and cVlan(vid) and vidRouter(vid) != rid) => routerPortZone(pid_t{rid, l3NextHop(rid, vid).port}) == routerPortZone(mac2pid(l3NextHop(rid, vid).addr))

    (* at most 2 hops between L3 routers *)
    assume (hid_t rid, vid_t vid) (cRouter(rid) and cVlan(vid)) => rid == vidRouter(vid) or
                                                                   mac2pid(l3NextHop(rid, vid).addr).hid == vidRouter(vid) or
                                                                   mac2pid(l3NextHop(mac2pid(l3NextHop(rid, vid).addr).hid, vid).addr).hid == vidRouter(vid)
    

    (* Router can send packets with vid==0 to other routers with interfaces in the same zone *)
    role RouterOut[hid_t rid, uint<16> port] | cRouterPort(pid_t{rid, port}) / pkt.vlan.vid == 12'd0 = 
        let pid_t dstpid = mac2pid(pkt.eth.dstAddr);
        filter portConnected(pid_t{rid,port});
        filter cConnectedRouterPort(dstpid);
        filter routerPortZone(dstpid) == routerPortZone(pid_t{rid, port});
        send RouterIn[dstpid.hid, dstpid.port]

    role RouterIn[hid_t rid, uint<16> port] | cRouterPort(pid_t{rid, port}) = 
        filter pkt.eth.etherType == etherTypeIP4();
        let vid_t vid = ip2vid(pkt.ip.dst);
        if vidRouter(vid) == rid (* Input gateway for the destination subnet *) then {
            send InGateway[vid]
        } else {
            (* send to next-hop routing *)
            let nexthop_t next = l3NextHop(rid, vid);
            pkt.eth.dstAddr := next.addr;
            send RouterOut[rid, next.port]
        }

    role OutGateway[vid_t vid] | cVlan(vid) = 
        filter pkt.eth.etherType == etherTypeIP4();
        filter pkt.vlan.vid == vid;
        let vid_t svid = ip2vid(pkt.ip.src);
        let vid_t dvid = ip2vid(pkt.ip.dst);
        filter svid == vid;
        filter cVlan(dvid) and dvid != vid;
        filter aclSrc(svid, dvid, pkt.ip);
        pkt.vlan.vid := 12'd0;
        let pid_t pid = mac2pid(vidRouterMAC(vid));
        send RouterIn[pid.hid, pid.port]
}


(* L2 switching *)
refine HostOut, RouterOut {

    typedef struct {
        uint<8>  dist,
        uint<16> port
    } l2nh_t

    function cSwitch(hid_t sid): bool
    assume (hid_t sid) cSwitch(sid) => not cHost(sid)
    assume (hid_t rid) cRouter(rid) => cSwitch(rid)

    function cPort(pid_t pid): bool = cSwitchPort(pid) or cHostPort(pid)
    function cConnectedPort(pid_t pid): bool = cPort(pid) and portConnected(pid)

    function cSwitchPort(pid_t pid): bool
    assume (pid_t pid) cSwitchPort(pid) => cSwitch(pid.hid)
    assume (pid_t pid) cRouterPort(pid) => cSwitchPort(pid)

    function cConnectedSwitchPort(pid_t pid): bool = cSwitchPort(pid) and portConnected(pid)

    function cHostPort(pid_t pid): bool = cHost(pid.hid) and pid.port == 16'd1
    function cConnectedHostPort(pid_t pid): bool = cHostPort(pid) and portConnected(pid)
    assume (pid_t pid) cHostPort(pid) => portConnected(pid)
    assume (pid_t pid) cHostPort(pid) => pid2mac(pid) == hid2mac(pid.hid)

    function link(pid_t pid): pid_t
    assume (pid_t pid) cConnectedPort(pid) => cConnectedPort(link(pid))
    assume (pid_t pid) cConnectedPort(pid) => (link(link(pid)) == pid)
    assume (pid_t pid) cConnectedHostPort(pid) => cSwitchPort(link(pid))

    function l2Hit(hid_t hid, vid_t vid, MAC dstaddr): bool = l2NextHop(hid, vid, dstaddr).dist > 8'd0
    (*function l2distance(hid_t hid, vid_t vid, MAC dstaddr): uint<8>*)
    function l2NextHop(hid_t hid, vid_t vid, MAC dstaddr): l2nh_t
    assume (hid_t sid, vid_t vid, MAC dst, l2nh_t nh) (nh == l2NextHop(sid,vid,dst) and cSwitch(sid) and nh.dist > 8'd0) => cConnectedSwitchPort(pid_t{sid, nh.port})

    assume (hid_t sid, vid_t vid, MAC dst) (l2NextHop(sid, vid, dst).dist > 8'd0) => cSwitch(sid)
    assume (hid_t sid, MAC dst, l2nh_t nh) (nh == l2NextHop(sid, 12'd0, dst) and nh.dist == 8'd1) => cConnectedRouterPort(link(pid_t{sid, nh.port}))
    assume (hid_t sid, MAC dst, l2nh_t nh) (nh == l2NextHop(sid, 12'd0, dst) and nh.dist == 8'd1) => pid2mac(link(pid_t{sid, nh.port})) == dst

    assume (hid_t sid, vid_t vid, MAC dst, l2nh_t nh) (nh == l2NextHop(sid,vid,dst) and nh.dist == 8'd1 and cVlan(vid) and dst == vidRouterMAC(vid)) => cConnectedSwitchPort(link(pid_t{sid, nh.port}))
    assume (hid_t sid, vid_t vid, MAC dst, l2nh_t nh) (nh == l2NextHop(sid, vid, dst) and nh.dist == 8'd1 and cVlan(vid) and dst == vidRouterMAC(vid)) => link(pid_t{sid, nh.port}).hid == vidRouter(vid)

    assume (hid_t sid, vid_t vid, MAC dst, l2nh_t nh) (nh == l2NextHop(sid, vid, dst) and nh.dist == 8'd1 and cVlan(vid) and dst != vidRouterMAC(vid) and mac2vid(dst) == vid) => cHostPort(link(pid_t{sid, nh.port}))
    assume (hid_t sid, vid_t vid, MAC dst, l2nh_t nh) (nh == l2NextHop(sid, vid, dst) and nh.dist == 8'd1 and cVlan(vid) and dst != vidRouterMAC(vid) and mac2vid(dst) == vid) => hid2mac(link(pid_t{sid, nh.port}).hid) == dst

    (*assume (hid_t sid, vid_t vid, MAC dst) (l2distance(sid, vid, dst) > 8'd1)  => cConnectedSwitchPort(pid_t{sid, l2NextHop(sid, vid, dst)})*)
    assume (hid_t sid, vid_t vid, MAC dst, l2nh_t nh) (nh == l2NextHop(sid, vid, dst) and nh.dist > 8'd1) => cConnectedSwitchPort(link(pid_t{sid, nh.port}))
    assume (hid_t sid, vid_t vid, MAC dst, hid_t hid, l2nh_t nh) (nh == l2NextHop(sid, vid, dst) and nh.dist > 8'd1 and cMAC(dst) and hid == link(pid_t{sid, nh.port}).hid)  => l2NextHop(hid, vid, dst).dist < nh.dist 
    assume (hid_t sid, vid_t vid, MAC dst, l2nh_t nh) (nh == l2NextHop(sid, vid, dst) and nh.dist > 8'd1 and ((cMAC(dst) and mac2vid(dst) == vid) or (cVlan(vid) and dst == vidRouterMAC(vid)) or (vid==12'd0 and cRouterPort(mac2pid(dst))))) 
                                => l2NextHop(link(pid_t{sid, nh.port}).hid, vid, dst).dist >= 8'd1 

    assume (pid_t pid, MAC dst)
           (pid != mac2pid(dst) and cConnectedRouterPort(pid) and cConnectedRouterPort(mac2pid(dst)) and routerPortZone(mac2pid(dst)) == routerPortZone(pid) and link(pid) != mac2pid(dst)) => 
           ((l2NextHop(link(pid).hid, 12'd0, dst).dist <= 8'd8) and (l2NextHop(link(pid).hid, 12'd0, dst).dist > 8'd0))

    assume (pid_t pid, MAC dst)
           (pid != mac2pid(dst) and cConnectedRouterPort(pid) and cConnectedRouterPort(mac2pid(dst)) and routerPortZone(mac2pid(dst)) == routerPortZone(pid)) => 
           cSwitch(link(pid).hid)

    (*assume (hid_t hid, MAC dst)
           (cHost(hid) and ((not cMAC(dst)) or mac2vid(dst) != hid2vid(hid)) and dst != vidRouterMAC(hid2vid(hid))) =>
           l2distance(link(pid_t{hid, 16'd1}).hid, hid2vid(hid), dst) == 8'd0 *)

    assume (hid_t hid, MAC dst)
           (cHost(hid) and cMAC(dst) and mac2vid(dst) == hid2vid(hid)) =>
           (l2NextHop(link(pid_t{hid, 16'd1}).hid, hid2vid(hid), dst).dist <= 8'd40 and l2NextHop(link(pid_t{hid, 16'd1}).hid, hid2vid(hid), dst).dist > 8'd0)

    assume (hid_t hid)
           cHost(hid) => cSwitch(link(pid_t{hid, 16'd1}).hid)

    assume (hid_t hid)
           cHost(hid) => 
           l2NextHop(link(pid_t{hid, 16'd1}).hid, hid2vid(hid), vidRouterMAC(hid2vid(hid))).dist <= 8'd40

    assume (hid_t hid)
           cHost(hid) => 
            l2NextHop(link(pid_t{hid, 16'd1}).hid, hid2vid(hid), vidRouterMAC(hid2vid(hid))).dist > 8'd0


    role SwitchIn[hid_t sid, uint<16> port] | cSwitchPort(pid_t{sid,port}) = 
        let pid_t srcport = link(pid_t{sid, port});
        (* tag packet if coming from end host *)
        if cHost(srcport.hid) then {
            pkt.vlan.vid := hid2vid(srcport.hid)
        };
        if cRouterPort(pid_t{sid, port}) and 
           pkt.vlan.vid == 12'd0 and 
           pid2mac(pid_t{sid,port}) == pkt.eth.dstAddr then {
            (*if this is a router and this packet is for this router then send it to the router *)
            send RouterIn[sid, port]
        } else if pkt.vlan.vid != 12'd0 and
                  pkt.eth.dstAddr == vidRouterMAC(pkt.vlan.vid) and
                  sid == vidRouter(pkt.vlan.vid) then {
            (* if this is an OutGateway and this packet is an outbound packet, deliver to the gateway *)
            send OutGateway[pkt.vlan.vid]
        } (*else if pkt.eth.dstAddr == bcastAddr() then {
            fork(hid_t dsthid | hid2vid(dsthid) == hid2vid(srcport.hid)) {
                send HostIn[dsthid]
            } 
        } *) else {
            (* Otherwise, apply l2 routing policy *)
            filter l2Hit(sid, pkt.vlan.vid, pkt.eth.dstAddr);
            let pid_t nxt = link(pid_t{sid, l2NextHop(sid, pkt.vlan.vid, pkt.eth.dstAddr).port});
            filter cHost(nxt.hid) => hid2mac(nxt.hid) == pkt.eth.dstAddr and hid2vid(nxt.hid) == pkt.vlan.vid;
            send SwitchOut[sid, l2NextHop(sid, pkt.vlan.vid, pkt.eth.dstAddr).port]
        }

    role SwitchOut[hid_t sid, uint<16> port] | cSwitchPort(pid_t{sid,port}) = 
        filter portConnected(pid_t{sid,port});
        let pid_t dstport = link(pid_t{sid, port});
        if cHostPort(dstport) then {
            pkt.vlan.vid := 12'd0;
            send HostIn[dstport.hid]
        } else {
            send SwitchIn[dstport.hid, dstport.port]
        }
        
    role HostOut[hid_t hid] | cHost(hid) = 
        filter portConnected(pid_t{hid, 16'd1});
        let pid_t swport = link(pid_t{hid, 16'd1});
        send SwitchIn[swport.hid, swport.port]

    role RouterOut[hid_t rid, uint<16> port] | cRouterPort(pid_t{rid, port}) / pkt.vlan.vid == 12'd0 = 
        let pid_t dstpid = mac2pid(pkt.eth.dstAddr);
        filter cConnectedRouterPort(pid_t{rid,port});
        filter cConnectedRouterPort(dstpid);
        filter routerPortZone(dstpid) == routerPortZone(pid_t{rid, port});
        if (dstpid.hid == rid) then {
            send RouterIn[rid, dstpid.port]
        } else {
            send SwitchOut[rid, port (*l2NextHop(rid, 12'd0, pkt.eth.dstAddr)*)]
        }
}

refine {

    include(`corporate.cfg.ccn')
(*
    function vidRouterMAC(vid_t vid): MAC = 
        case {
            vid == 12'd1: 48'haaaaaaaaaaaa;
            vid == 12'd2: 48'hbbbbbbbbbbbb;
            default:      48'h0;
        }

    function ip2vid(IP4 ip): vid_t = 
        case {
            ip == 32'h01020304: 12'd2;
            ip == 32'h05060708: 12'd1;
            default:            12'd0;
        }

    function hid2ip(hid_t hid): IP4 = 
        case {
            hid == 64'd1: 32'h01020304;
            hid == 64'd2: 32'h05060708;
            default:      32'h0;
        }
    function ip2hid(IP4 ip): hid_t =
        case {
            ip == 32'h01020304: 64'd1;
            ip == 32'h05060708: 64'd2;
            default:            64'd0;
        }

    function acl(vid_t srcvlan, vid_t dstvlan, ip4_t ip): bool = 
        (ip.src == 32'h01020304 and ip.dst == 32'h05060708) or
        (ip.src == 32'h05060708 and ip.dst == 32'h01020304)

    function aclSrc(vid_t srcvlan, vid_t dstvlan, ip4_t ip): bool = acl(srcvlan, dstvlan, ip)
    function aclDst(vid_t srcvlan, vid_t dstvlan, ip4_t ip): bool = true

    function cZone(zid_t zid): bool = zid == 32'd1 or zid == 32'd2 or zid == 32'd3

    function cRouter(hid_t rid): bool = rid == 64'd10000001 or rid == 64'd10000002
    function vidRouter(vid_t vid): hid_t = 
        case {
            vid == 12'd1: 64'd10000001;
            vid == 12'd2: 64'd10000002;
            default:      64'd0;
        }

    function nPorts(hid_t hid): uint<16> = 
        case {
           cHost(hid):   16'd1;
           cRouter(hid): 16'd2;
           default:      16'd0;
        }

    function portConnected(pid_t pid): bool = true
    
    function routerPortZone(pid_t pid): zid_t = 
        case { 
            pid == pid_t{64'd10000001, 16'd0}: 32'd1;
            pid == pid_t{64'd10000001, 16'd1}: 32'd3;
            pid == pid_t{64'd10000002, 16'd0}: 32'd2;
            pid == pid_t{64'd10000002, 16'd1}: 32'd3;
            default: 32'd0;
        }

    function pid2mac(pid_t pid): MAC = 
        case { 
            pid == pid_t{64'd1,        16'd0}: 48'hcccccccccccc;
            pid == pid_t{64'd2,        16'd0}: 48'hdddddddddddd;
            pid == pid_t{64'd10000001, 16'd0}: 48'haaaaaaaaaaaa;
            pid == pid_t{64'd10000001, 16'd1}: 48'ha0a0a0a0a0a0;
            pid == pid_t{64'd10000002, 16'd0}: 48'hbbbbbbbbbbbb;
            pid == pid_t{64'd10000002, 16'd1}: 48'hb0b0b0b0b0b0;
            default:                           48'd0;
        }

    function mac2pid(MAC mac): pid_t = 
        case {
            mac == 48'hcccccccccccc: pid_t{64'd1,        16'd0};
            mac == 48'hdddddddddddd: pid_t{64'd2,        16'd0};
            mac == 48'haaaaaaaaaaaa: pid_t{64'd10000001, 16'd0};
            mac == 48'ha0a0a0a0a0a0: pid_t{64'd10000001, 16'd1};
            mac == 48'hbbbbbbbbbbbb: pid_t{64'd10000002, 16'd0};
            mac == 48'hb0b0b0b0b0b0: pid_t{64'd10000002, 16'd1};
            default:                 pid_t{64'd0, 16'd0};
        }

    function l3NextHop(hid_t rid, vid_t vid): nexthop_t = 
        case {
            rid == 64'd10000001 and vid == 12'd2: nexthop_t{48'hb0b0b0b0b0b0, 
            16'd1};
            rid == 64'd10000002 and vid == 12'd1: nexthop_t{48'ha0a0a0a0a0a0, 16'd1};
            default:                              nexthop_t{48'd0, 16'd0};
        }

    function cSwitch(hid_t sid): bool = cRouter(sid)

    function link(pid_t pid): pid_t = 
        case {
            pid == pid_t{64'd1,        16'd0}: pid_t{64'd10000001, 16'd0};
            pid == pid_t{64'd2,        16'd0}: pid_t{64'd10000002, 16'd0};
            pid == pid_t{64'd10000001, 16'd0}: pid_t{64'd1,        16'd0};
            pid == pid_t{64'd10000001, 16'd1}: pid_t{64'd10000002, 16'd1};
            pid == pid_t{64'd10000002, 16'd0}: pid_t{64'd2,        16'd0};
            pid == pid_t{64'd10000002, 16'd1}: pid_t{64'd10000001, 16'd1};
            default:                           pid_t{64'd0,        16'd0};
        }

    function l2distance(hid_t hid, vid_t vid, MAC dstaddr): uint<8> = 
        case {
            hid == 64'd10000001 and vid == 12'd0 and dstaddr == 48'hb0b0b0b0b0b0: 8'd1;
            hid == 64'd10000002 and vid == 12'd0 and dstaddr == 48'ha0a0a0a0a0a0: 8'd1;

            hid == 64'd10000001 and vid == 12'd1 and dstaddr == 48'hdddddddddddd: 8'd2;
            hid == 64'd10000001 and vid == 12'd2 and dstaddr == 48'hcccccccccccc: 8'd1;
            hid == 64'd10000001 and vid == 12'd2 and dstaddr == 48'hbbbbbbbbbbbb: 8'd1;

            hid == 64'd10000002 and vid == 12'd1 and dstaddr == 48'hdddddddddddd: 8'd1;
            hid == 64'd10000002 and vid == 12'd1 and dstaddr == 48'haaaaaaaaaaaa: 8'd1;
            hid == 64'd10000002 and vid == 12'd2 and dstaddr == 48'hcccccccccccc: 8'd2;

            default: 8'd0;
        }

    function l2NextHop(hid_t hid, vid_t vid, MAC dstaddr): uint<16> = 
        case {
            hid == 64'd10000001 and vid == 12'd0 and dstaddr == 48'hb0b0b0b0b0b0: 16'd1;
            hid == 64'd10000002 and vid == 12'd0 and dstaddr == 48'ha0a0a0a0a0a0: 16'd1;

            hid == 64'd10000001 and vid == 12'd1 and dstaddr == 
            48'hdddddddddddd: 16'd1;
            hid == 64'd10000001 and vid == 12'd2 and dstaddr == 48'hcccccccccccc: 16'd0;
            hid == 64'd10000001 and vid == 12'd2 and dstaddr == 48'hbbbbbbbbbbbb: 16'd1;

            hid == 64'd10000002 and vid == 12'd1 and dstaddr == 48'hdddddddddddd: 16'd0;
            hid == 64'd10000002 and vid == 12'd1 and dstaddr == 48'haaaaaaaaaaaa: 16'd1;
            hid == 64'd10000002 and vid == 12'd2 and dstaddr == 48'hcccccccccccc: 16'd1;

            default: 16'd0;
        }*)


}
