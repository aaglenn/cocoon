(* Formalization of the load balancing algorithm in 
   Wang et al. OpenFlow-Based Server Load Balancing Gone Wild, HotIce'11 *)

(* IPv4 address *)
typedef struct {
    uint<8> ip3,
    uint<8> ip2,
    uint<8> ip1,
    uint<8> ip0
} IP4

(* Ethernet header -- not used in this spec, can be ignored *)
typedef struct {
    uint<48> dstAddr,
    uint<48> srcAddr
} HEth

(* IPv4 header *)
typedef struct {
    uint<8> protocol,
    IP4 src,
    IP4 dst
} HIP4

(* VLAN tag -- not used in this spec, can be ignored *)
typedef struct {
    bool valid, (* true - VLAN tag is present *)
    uint<16> tag
} VLANTag

(* TCP header.  Only relevant fields need to be specified *)
typedef struct {
    bool valid, (* true - TCP header is present *)
    uint<16> srcPort,
    uint<16> dstPort
} HTCP 

(* This work deals with network traffic at the source IP address granularity *)
typedef struct {
    IP4 src
} FlowId

(* Packet data type, passed as implicit argument to all roles *)
typedef struct {
    HEth     ethernet,
    HIP4     ip4,
    VLANTag  vlan,
    HTCP     tcp
} Packet


(* Top-level spec: 
   The load balancer forwards packets to the HTTP server instance that handles the
   flow the packet belongs to. 

   Naming convention: role names ending with In and Out model input and output ports
   of switches or hosts; other names model other types of entities, e.g., the HTTPServer
   role models a logical HTTP server instance.

        |
        v 
        o LoadBalancerIn[uint<4> port]
        |
        |
        v
 ---------------------
 |                   |
 | HTTPServer[FlowId]|
 |                   |
 ---------------------

*)

(* Logical HTTP server instance that handles all packets in a flow.
   The actual implementation creates these on demand, when the first packet 
   of the flow arrives.  *)
role HTTPServer[FlowId flow] = filter false

(* Extract flow id from packet *)
function fid(Packet p): FlowId = FlowId{p.ip4.src}


(* Input port of the load balancer switch *)
role LoadBalancerIn[uint<4> port] = 
    filter pkt.tcp.valid;             (* Filter out non-TCP traffic only *)
    filter pkt.tcp.dstPort == 16'd80; (* Filter out non-HTTP packets *)
    havoc pkt.ip4.dst;                (* Destination IP may change; other packet fields must remain unmodified *)
    send HTTPServer[fid(pkt)] (* Deliver packet to the correct server instance *)

(* The first refinement specifies that logical servers reside inside physical 
   hosts and that a packet is delivered to the logical server via the physical 
   server that hosts it.

        |
        v LoadBalancerIn[uint<4> port]
 -------o-------------- 
 |                    |
 |                    |
 |                    |
 -------o--------------
        | LoadBalancerIntOut[uint<4> port] - internal output port of the load balancer
        |
        v 
        o ServerIn[IP4 ip, uint<8> port] - physical server port
        |
        | 
        v
 ---------------------
 |                   |
 | HTTPServer[FlowId]|
 |                   |
 ---------------------
*)
refine LoadBalancerIn {

    (* Naming convention:
       Function names starting with "i" are "indicator" functions, which 
       return true iff the entity identified by function arguments exists *)

    (* true iff a physical server machine with the given IP exists *)
    function iserver(IP4 addr) : bool

    (* Returns IP address of the server where the flow is currently hosted *)
    function hostedAt(FlowId flow): IP4

    (* Assumption: hostedAt must return valid server address *)
    assume (FlowId flow, IP4 addr) (not (addr == hostedAt(flow))) or iserver(addr)

    (* Physical server port: deliver packet to the HTTP server if it is
       hosted at this physical server; drop it otherwise *)
    role ServerIn[IP4 addr, uint<8> port] | iserver(addr) and port == 8'd0 = 
        if (hostedAt(fid(pkt)) == addr) then
            send HTTPServer[fid(pkt)]
       
    role LoadBalancerIn[uint<4> port] = 
        filter pkt.tcp.valid; filter pkt.tcp.dstPort == 16'd80;
        pkt.ip4.dst := hostedAt(fid(pkt)); (* Change destination IP to correct server IP *)
        send LoadBalancerIntOut[4'd0] 
 
    role LoadBalancerIntOut[uint<4> port] | port == 4'd0 = 
        filter iserver(pkt.ip4.dst);
        send ServerIn[pkt.ip4.dst, 8'd0]
}

(* Decompose the load balancer logic into two hash functions:
   - hashFID maps flow ID to IP of the server that should host this flow under current load distribution policy 
   - oldHashFID - previous hash function applied to old flows.
 *)
refine LoadBalancerIn{
    (* Hash flow id into IP address of the server that hosts this flow in stable state *)
    function hashFID(FlowId flow): IP4

    (* True for old flows that have to be migrated but have not expired yet *)
    function ioldflow(FlowId flow): bool

    (* Old hash function (before load re-balancing) *)
    function oldHashFID(FlowId flow): IP4

    (* The main configuration invariant:
       - old flows are hosted at locations computed by the old hashing function
       - all other flows are hosted according to the hashFID function *)
    assume(FlowId flow) (ioldflow(flow) and (hostedAt(flow) == oldHashFID(flow))) or
                        ((not ioldflow(flow)) and (hostedAt(flow) == hashFID(flow)))

    (* Send old flows according to the old hash function; use the new hash function for all other flows *)
    role LoadBalancerIn[uint<4> port] = 
        filter pkt.tcp.valid; filter pkt.tcp.dstPort == 16'd80;
        pkt.ip4.dst := case {
            ioldflow(fid(pkt)): oldHashFID(fid(pkt));
            default:            hashFID(fid(pkt));
        };
        send LoadBalancerIntOut[4'd0] 
}

(* Any functions defined in this file become static configuration that cannot be changed at runtime.
   Here we define a fixed set of three servers.  Alternatively, this could be done at runtime via
   the config file, in which case servers can be added and removed dynamically.
 *)
refine {
    function iserver(IP4 addr): bool = 
        addr == IP4{8'd10,8'd0,8'd0,8'd1} or 
        addr == IP4{8'd10,8'd0,8'd0,8'd2} or 
        addr == IP4{8'd10,8'd0,8'd0,8'd3}
}
