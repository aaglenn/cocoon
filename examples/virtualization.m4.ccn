(* Secure home network *)

typedef uint<32> IP4

typedef uint<48> MAC

typedef struct {
    MAC dstAddr,
    MAC srcAddr
} eth_t

typedef struct {
    bool valid,
    uint<16> oper,
    MAC      sha,
    uint<32> spa,
    MAC      tha,
    uint<32> tpa
} arp_t

function noarp(): arp_t = arp_t{false, 16'd0, 48'd0, 32'd0, 48'd0, 32'd0}

typedef struct {
    bool valid,
    uint<8> protocol,
    IP4 src,
    IP4 dst
} ip4_t

typedef struct {
    bool     valid,
    uint<24> vni,
    eth_t    eth,
    vlan_t   vlan,
    arp_t    arp,
    ip4_t    ip4
} vxlan_t

function novxlan(): vxlan_t = vxlan_t{false, 24'd0, eth_t{48'd0, 48'd0}, vlan_t{16'd0}, noarp(), ip4_t{false, 8'd0, 32'h0, 32'h0}}

typedef struct {
    uint<16> vid
} vlan_t

typedef struct {
    eth_t    eth,
    vlan_t   vlan,
    arp_t    arp,
    ip4_t    ip4,
    vxlan_t  vxlan
} Packet

ifelse(VIRT_STYLE, `VXLAN', `typedef uint<24> VNetId', `typedef uint<16> VNetId')

typedef uint<32> VHostId
typedef struct {
    VHostId vhost,
    uint<8> vport
} VHPortId

typedef uint<48> HostId

(*  TODO: 
    - Service chaining
    - Multiple physical networks
 *)

(* Virtual network topology *)
(*function iVNet(VNetId id): bool*)
function iL2VNet(VNetId id): bool
function iL3VNet(VNetId id): bool
function iVNet(VNetId id): bool = iL3VNet(id) or iL2VNet(id)
assume (VNetId id) not (iL3VNet(id) and iL2VNet(id))

function iVHost(VHostId id): bool
function iVHostPort(VHPortId port): bool
assume (VHPortId port) iVHostPort(port) => iVHost(port.vhost)

function vHPortVNet(VHPortId port): VNetId
assume (VHPortId port) iVHostPort(port) => iVNet(vHPortVNet(port))

function vHPort2Mac(VHPortId port): MAC
function mac2VHPort(VNetId vnet, MAC mac): VHPortId
assume (VHPortId port, MAC mac, VNetId vnet) (* bijection *)
       iVHostPort(port) => 
           ((vHPortVNet(port) == vnet and vHPort2Mac(port) == mac) == (mac2VHPort(vnet, mac) == port))
function bCastMAC(): MAC = 48'hffffffffffff
assume (VHPortId vport) bCastMAC() != vHPort2Mac(vport)

function ip2mac(IP4 ip): MAC


function arpResponse(Packet p): Packet = 
    Packet{ eth_t { p.arp.tha
                  , p.arp.sha
                  }
          , p.vlan
          , arp_t { true
                  , 16'd2 (* ARP response *)
                  , ip2mac(p.arp.tpa)
                  , p.arp.tpa
                  , p.arp.sha
                  , p.arp.spa
                  }
          , p.ip4
          , p.vxlan
          }

typedef uint<64> tag_t

function allowedToRead(VHostId hst, tag_t tag): bool

(* Proxy ports can re-taint packets flowing through them.  
   Sensors are a special case of proxies. *)
function iProxyPort(VHPortId port): bool
function taintsWith(VHPortId port, tag_t tag): bool

(* P2P connection allowed *)
function connection(VHPortId from, VHPortId to): bool

function tainted(VHostId hst, tag_t tag): bool
assume (VHPortId port1, VHPortId port2, tag_t tag) 
       (iProxyPort(port1) and taintsWith(port1, tag) and connection(port1, port2)) => tainted(port2.vhost, tag)

assume (VHPortId port1, VHPortId port2, tag_t tag)
       (tainted(port1.vhost, tag) and (not iProxyPort(port1)) and connection(port1, port2)) => tainted(port2.vhost, tag)

(* The main confidentiality property *)
assume (VHostId hst, tag_t tag) tainted(hst, tag) => allowedToRead(hst, tag)


role VHostVIn[VHostId vhost, uint<8> port] | iVHostPort(VHPortId{vhost, port}) = filter false

role VHostVOut[VHostId vhost, uint<8> port] | iVHostPort(VHPortId{vhost, port}) = 
    let VNetId vnet = vHPortVNet(VHPortId{vhost, port});
    (* Don't allow hosts to lie about their MAC address *)
    if pkt.eth.srcAddr == vHPort2Mac(VHPortId{vhost, port}) ifelse(VIRT_STYLE,`VLAN', and pkt.vlan.vid == 16'd0,`') then {
        if bCastMAC() == pkt.eth.dstAddr then {
            if iL2VNet(vnet) then {
                ifelse(VIRT_STYLE,`VXLAN', `pkt.vxlan := novxlan();',`')
                fork (VHPortId vhport | iVHostPort(vhport) and 
                                        vHPortVNet(vhport) == vnet and 
                                        vhport != VHPortId{vhost, port} and 
                                        connection(VHPortId{vhost,port}, vhport)) {
                    send VHostVIn[vhport.vhost, vhport.vport]
                }
            } else if iL3VNet(vnet) and pkt.arp.valid and (pkt.arp.oper == 16'd1 (*ARP Request*)) then {
                pkt := arpResponse(pkt);
                send VHostVIn[vhost, port]
            }
        } else {
            (* Deliver to destination MAC within virtual network *)
            let VHPortId dstvhport = mac2VHPort(vnet, pkt.eth.dstAddr);
            if iVHostPort(dstvhport) and connection(VHPortId{vhost,port}, dstvhport) then {
                ifelse(VIRT_STYLE,`VXLAN', `pkt.vxlan := novxlan();',`')
                send VHostVIn[dstvhport.vhost, dstvhport.vport]
            }
        }
    }

refine {
    function iHost(HostId hst): bool
    function hostIP(HostId hst): IP4
    function ip2Host(IP4 addr): HostId
    assume (HostId hst) iHost(hst) => (hst == ip2Host(hostIP(hst)))

    function iVHostPPort(VHPortId port): bool
    assume (VHPortId port) iVHostPPort(port) => iVHost(port.vhost)

    function v2pPort(VHPortId port): HostId
    function p2vPort(HostId addr): VHPortId
    assume (VHPortId port, HostId hst) (iVHostPPort(port) and (hst == v2pPort(port))) => iHost(hst) 
    assume (VHPortId port, HostId hst) (iVHostPPort(port) and (hst == v2pPort(port))) => (p2vPort(hst) == port)

    role VHostPIn[VHostId vhost, uint<8> port] | iVHostPPort(VHPortId{vhost, port}) = filter false
    role VHostPOut[VHostId vhost, uint<8> port] | iVHostPPort(VHPortId{vhost, port}) = 
        if pkt.vxlan == novxlan() then {
            send VSwitchPlainOut[v2pPort(VHPortId{vhost, port})]
        }

    role VSwitchPlainOut[HostId hst] | iHost(hst) / not pkt.vxlan.valid = 
        let HostId dhst = ip2Host(pkt.ip4.dst);
        if (pkt.ip4.valid and iHost(dhst)) then
            send VSwitchPlainIn[dhst]

    role VSwitchPlainIn[HostId hst] | iHost(hst) / pkt.vxlan == novxlan() = 
        let VHPortId vport = p2vPort(hst);
        if iVHostPPort(vport) then {
            send VHostPIn[vport.vhost, vport.vport]
        }
}


