typedef struct {
    uint<8> ip3,
    uint<8> ip2,
    uint<8> ip1,
    uint<8> ip0
} IP4

typedef struct {
    IP4 dst
} Packet

function netmask(): uint<8>
function k(): uint<8>

role Node(IP4 addr)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip3 < k()] = 
    (filter addr = pkt.dst) | (filter not (addr = pkt.dst) ; send Node[pkt.dst])

refine Node {

    role Fabric() =
        send Node[pkt.dst]
        
    role Node(IP4 addr)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip3 < k()] = 
        (filter addr = pkt.dst) | (filter not (addr = pkt.dst) ; send Fabric[])
}

refine Fabric, Node {
    role Core() = 
        send Pod[pkt.dst.ip2]

    role Pod(uint<8> subnet)[subnet < k() + k()] = 
          (filter pkt.dst.ip2 = subnet); send Core[]
        | (filter not (pkt.dst.ip2 = subnet); send Node[pkt.dst])

    role Node(IP4 addr)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip3 < k()] = 
        (filter addr = pkt.dst) | (filter not (addr = pkt.dst) ; send Pod[pkt.dst.ip2])
}

refine Core, Pod, Node {
    role Core() = 
        send PodUpper[pkt.dst.ip2]

    role PodUpper(uint<8> subnet) [subnet < k() + k()] = 
          (filter pkt.dst.ip2 = subnet); send PodLower[subnet,pkt.dst.ip1]
        | (filter not (pkt.dst.ip2 = subnet); send Core[])

    role PodLower(uint<8> subnet, uint<8> subsubnet) [subnet < k() + k() and subsubnet < k()] = 
          (filter pkt.dst.ip2 = subnet and pkt.dst.ip1 = subsubnet); send Node[pkt.dst]
        | (filter not (pkt.dst.ip2 = subnet and pkt.dst.ip1 = subsubnet); send PodUpper[subnet])

    role Node(IP4 addr)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip3 < k()] = 
        (filter addr = pkt.dst) | (filter not (addr = pkt.dst) ; send PodLower[pkt.dst.ip2, pkt.dst.ip1])
}

refine Core, PodUpper, PodLower {
    role Core(uint<8> hash)[hash < k()] = 
        send PodUpper[pkt.dst.ip2, hash]

    role PodUpper(uint<8> subnet, uint<8> hash) [subnet < k() + k() and hash < k()] = 
          (filter pkt.dst.ip2 = subnet); send PodLower[subnet,pkt.dst.ip1]
        | (filter not (pkt.dst.ip2 = subnet); send Core[hash])

    role PodLower(uint<8> subnet, uint<8> subsubnet) [subnet < k() + k() and subsubnet < k()] = 
          (filter pkt.dst.ip2 = subnet and pkt.dst.ip1 = subsubnet); send Node[pkt.dst]
        | (filter not (pkt.dst.ip2 = subnet and pkt.dst.ip1 = subsubnet); send PodUpper[subnet,(subnet+pkt.dst.ip0)%k()])
}

refine Core, PodUpper {
    role Core(uint<8> hash, uint<8> hash2)[hash < k() and hash2 < k()] = 
        send PodUpper[pkt.dst.ip2, hash]

    role PodUpper(uint<8> subnet, uint<8> hash) [subnet < k() + k() and hash < k()] = 
          (filter pkt.dst.ip2 = subnet); send PodLower[subnet,pkt.dst.ip1]
        | (filter not (pkt.dst.ip2 = subnet); send Core[hash, (hash + pkt.dst.ip0)%k()])
}

refine PodUpper, Core, PodLower {
    role PodUpperUIn(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
          send PodUpperLOut[subnet, hash, pkt.dst.ip1]

    role PodUpperUOut(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
          send Core[hash, port]

    role PodUpperLIn(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
          (filter pkt.dst.ip2 = subnet); send PodUpperLOut[subnet, hash, pkt.dst.ip1]
        | (filter not (pkt.dst.ip2 = subnet); send PodUpperUOut[subnet, hash, (hash + pkt.dst.ip0)%k()])

    role PodUpperLOut(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
          send PodLower[subnet, port]

    role Core(uint<8> hash, uint<8> hash2)[hash < k() and hash2 < k()] = 
        send PodUpperUIn[pkt.dst.ip2, hash, hash2]

    role PodLower(uint<8> subnet, uint<8> subsubnet) [subnet < k() + k() and subsubnet < k()] = 
          (filter pkt.dst.ip2 = subnet and pkt.dst.ip1 = subsubnet); send Node[pkt.dst]
        | (filter not (pkt.dst.ip2 = subnet and pkt.dst.ip1 = subsubnet); send PodUpperLIn[subnet,(subnet+pkt.dst.ip0)%k(),subsubnet])
}

refine Core, PodUpperUOut {
    role CoreIn(uint<8> hash, uint<8> hash2, uint<8> port)[hash < k() and hash2 < k() and port < k() + k()] = 
        send CoreOut[hash, hash2, pkt.dst.ip2]

    role CoreOut(uint<8> hash, uint<8> hash2, uint<8> port)[hash < k() and hash2 < k() and port < k() + k()] = 
        send PodUpperUIn[port, hash, hash2]

    role PodUpperUOut(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
        send CoreIn[hash, port, subnet]
}

refine PodLower, PodUpperLOut, Node {
    role PodLowerUIn(uint<8> subnet, uint<8> subsubnet, uint<8> port) [subnet < k() + k() and subsubnet < k() and port < k()] = 
        send PodLowerLOut[subnet, subsubnet, pkt.dst.ip0]

    role PodLowerUOut(uint<8> subnet, uint<8> subsubnet, uint<8> port) [subnet < k() + k() and subsubnet < k() and port < k()] = 
        send PodUpperLIn[subnet, port, subsubnet]

    role PodLowerLIn(uint<8> subnet, uint<8> subsubnet, uint<8> port) [subnet < k() + k() and subsubnet < k() and port < k()] = 
          (filter pkt.dst.ip2 = subnet and pkt.dst.ip1 = subsubnet); send PodLowerLOut[subnet, subsubnet, pkt.dst.ip0]
        | (filter not (pkt.dst.ip2 = subnet and pkt.dst.ip1 = subsubnet); send PodLowerUOut[subnet,subsubnet,(subnet+pkt.dst.ip0)%k()])

    role PodLowerLOut(uint<8> subnet, uint<8> subsubnet, uint<8> port) [subnet < k() + k() and subsubnet < k() and port < k()] = 
        send Node[IP4{pkt.dst.ip3,subnet, subsubnet, port}]

    role PodUpperLOut(uint<8> subnet, uint<8> hash, uint<8> port)[subnet < k() + k() and hash < k() and port < k()] = 
        send PodLowerUIn[subnet, port, hash]

    role Node(IP4 addr)[addr.ip3 = netmask() and addr.ip2 < k()+k() and addr.ip3 < k()] = 
        (filter addr = pkt.dst) | (filter not (addr = pkt.dst) ; send PodLowerLIn[pkt.dst.ip2, pkt.dst.ip1, pkt.dst.ip0])
}

refine {

    role CoreSwitch(uint<8> hash, uint<8> hash2)[hash < k() and hash2 < k()] = (filter false)
    switch CoreSwitch( (CoreIn, CoreOut) )

    role PodUpperSwitch(uint<8> subnet, uint<8> hash)[subnet < k() + k() and hash < k()] = (filter false)
    switch PodUpperSwitch( (PodUpperUIn, PodUpperUOut), (PodUpperLIn, PodUpperLOut))

    role PodLowerSwitch(uint<8> subnet, uint<8> subsubnet) [subnet < k() + k() and subsubnet < k()] = (filter false)
    switch PodLowerSwitch( (PodLowerUIn, PodLowerUOut), (PodLowerLIn, PodLowerLOut))
}
